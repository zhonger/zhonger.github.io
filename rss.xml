<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>仲儿的自留地</title>
    <description>个人的一个技术博客站点，主要用于记录个人在学习过程中遇到的技术问题及解决方法、技术实验，以及一些比较有趣的事情。</description>
    <link>https://lisz.me//</link>
    <atom:link href="https://lisz.me/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 15 Apr 2025 11:49:27 +0900</pubDate>
    <lastBuildDate>Tue, 15 Apr 2025 11:49:27 +0900</lastBuildDate>
    <generator>Jekyll v4.4.1</generator>
    
      <item>
        <title>Kubernetes 不完全入门</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  Web 应用的生产环境部署随着技术的发展不断地发生改变，如下图所示，从最早期的单机环境到多机环境，再发展到复杂环境：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;单机环境&lt;/strong&gt;指的是代码、运行环境、文件存储、数据库服务都在同一台服务器上的应用部署方式。通常来说，个人应用或者早期 Demo 应用大多采用这类方式。单机环境的优点在于不需要太多服务器资源，缺点在于过分依赖本地资源而没有高可用性、高可扩展性以及数据的安全保障。如果是云服务器作为单机环境，可以通过升级配置的方式来提高 CPU、内存和存储资源。至于数据则可以通过异机备份或本地备份的方式来保障数据的可靠性。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;多机环境&lt;/strong&gt;指的是同一应用所需的运行环境、数据库服务、文件存储服务分布在不同的节点或集群中的应用部署方式。这类方式的优点自然是具备高可用性、高可扩展性以及完备的数据安全保障，缺点则是需要大量的服务器资源。因此，多机环境通常是对外大量用户提供服务时常用的方式。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;复杂环境&lt;/strong&gt;打破了原有的瓶瓶罐罐，是多机环境的一种的超级形态。在复杂环境中，不再拘泥于服务器节点本身，而是利用 Web 应用将已有的云资源联系在一起。说得更直白一点，就是应用开发者不再需要关心应用运行环境、数据库服务、文件存储等基础环境的配置和管理，唯一需要关心的只有应用代码本身。这也是现在大部分 Web 应用的真实部署方式。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  自从代码版本跟踪软件 Git 横空出世以来，逐步形成了以 Git 为中心的&lt;strong&gt;持续开发、持续集成和持续部署&lt;/strong&gt;的现代应用开发方式。这与复杂环境的部署方式完全契合，由云服务提供商来提供和维护各类运行环境、数据库服务和文件存储，开发团队只需要专注于对代码存储库的管理。&lt;/p&gt;

&lt;p&gt;  举个例子，当某个开发成员完成了某个模块的开发并推送到某个分支，该分支创建后会自动触发持续集成进行自动 Review。自动 Review 通过后，开发团队负责人可以对该分支的代码更改进行审核，通过后允许将该分支与其他某个指定分支进行合并（合并操作也是通过持续集成自动进行）。当所有代码开发完毕后，由总负责人审核汇入最终部署的分支。审核通过后持续集成会自动合并代码并通过持续部署将完整的代码部署到真实的运行环境中。如今的 GitHub、GitLab 均能完成持续开发、持续集成和持续部署的全过程。当然，也有一些软件（比如 &lt;a href=&quot;https://www.jenkins.io/&quot;&gt;Jenkins&lt;/a&gt; 等）可以完成持续集成和持续部署两步，而持续开发则可以依托任意的 Git 托管服务。&lt;/p&gt;

&lt;div class=&quot;premonition warning&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon warning&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-warning&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 友情提醒 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  以上叙述非专业解释，仅为个人看法，不喜勿喷。Kubernetes 官方将部署方式分为&lt;strong&gt;传统部署&lt;/strong&gt;、&lt;strong&gt;虚拟化部署&lt;/strong&gt;和&lt;strong&gt;容器部署&lt;/strong&gt;三类。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/79is8s.webp&quot; alt=&quot;(a) 单机环境和多机环境。(b) 复杂环境。(c)以 Git 为中心的持续开发、持续集成、持续部署的现代应用开发方式。&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;实例解析&quot;&gt;实例解析&lt;/h3&gt;

&lt;p&gt;  假设一个 Web 应用同时需要使用：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;运行环境&lt;/strong&gt;：PHP 运行环境、Python 运行环境、NodeJS 运行环境。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;数据库服务&lt;/strong&gt;：关系型数据库（比如 MySQL）、非关系型数据库（比如 MongoDB）、缓存数据库（比如 Redis）。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;文件存储&lt;/strong&gt;：用于存储用户头像、上传文件的对象存储（S3）、用于存储运行代码的文件存储（比如 NFS）。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;高可用应用入口&lt;/strong&gt;：比如 Nginx、HaProxy 等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  在单机环境中，按照以前我们碰见这种要求可能就要头大了，毕竟同时配置这么多环境难免会有不可预知的问题。不过现在，容器化技术（比如 &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;）可以帮助我们将所有的需求都拆分成独立的 container 实例。不但可以让它们之间在内部网络中互通，还可以对外只暴露必要的应用入口所需的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;80&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;443&lt;/code&gt; 端口。这样一来，既将各项服务进行了合理拆分，又能保证应用服务的安全性。即使是需要对某个运行环境或者数据库服务进行版本升级，也可以很容易做到。&lt;/p&gt;

&lt;p&gt;  在多机环境中，我们如果还想用容器化技术，那就必须用容器化集群。很久以前，Docker 官方就提供了一种 Swarm 模式来组成容器化集群。这种方式的好处是非常简单配置、轻量易用，对于熟悉使用 Docker 的开发者来说只需要花很少的时间就能搞明白。缺点也很明显，Docker Swarm 依赖于 Docker API。也就是说，Docker 本身不支持的东西还是不支持，比如更加高效安全的网络、花式多样的存储等。为了能够更好跨主机集群地自动部署、扩展以及运行应用程序容器，我们选择使用 &lt;a href=&quot;https://kubernetes.io/zh-cn/&quot;&gt;Kubernetes&lt;/a&gt;（缩写为 &lt;strong&gt;K8S&lt;/strong&gt;）。&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小知识 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  在 2014 年 Google 开源了 Kubenetes 项目，后来又贡献给了云原生计算基金会 &lt;a href=&quot;https://www.cncf.io/&quot;&gt;CNCF&lt;/a&gt;。很多公司以 Kubernetes 为基础开发了自家的容器化集群平台，比如 RedHat 的 &lt;a href=&quot;https://www.redhat.com/en/technologies/cloud-computing/openshift&quot;&gt;OpenShift&lt;/a&gt;，AWS 的 &lt;a href=&quot;https://aws.amazon.com/cn/eks/&quot;&gt;Elastic Kubenetes Services, EKS&lt;/a&gt;，Azure 的 &lt;a href=&quot;https://azure.microsoft.com/zh-cn/products/kubernetes-service&quot;&gt;Azure Kubernetes Services, AKS&lt;/a&gt;，阿里云的 &lt;a href=&quot;https://www.aliyun.com/product/kubernetes&quot;&gt;Aliyun Container Service for Kubernetes, ACK&lt;/a&gt;，腾讯云的 &lt;a href=&quot;https://cloud.tencent.com/product/tke&quot;&gt;Tencent Kubernetes Engine, TKE&lt;/a&gt; 等。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h2 id=&quot;kubernetes-架构&quot;&gt;Kubernetes 架构&lt;/h2&gt;

&lt;p&gt;  虽然 Kubernetes 官方文档已经将架构图以及相关概念介绍得非常清楚，但还是想说说自己的理解。类似于一般集群平台，K8S 也需要有至少一个控制节点（官方称之为“控制平面”）和一个工作节点。默认来说，K8S &lt;strong&gt;不推荐控制节点同时作为工作节点&lt;/strong&gt;，因为这会影响集群调度的可靠性和可用性。从下面的重绘架构图可以看出，K8S 集群会对外提供 API 以供用户从集群外进行调度。在集群内部，工作节点通过 kubelet 服务与控制节点直接连接，控制节点也通过 kubelet 服务向工作节点下达调度指令来管理工作节点上的 pod。&lt;/p&gt;

&lt;div class=&quot;premonition note&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon note&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-note&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; Pod 的概念 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  Pod 可以理解为 K8S 中应用的最小单位，一个 Pod 中可能会包括一个或多个 container (容器)，这些容器间可以互通，但对外只有 Pod 有资格拥有 IP。这有点类似于进程与线程之间的关系，进程是拥有资源的最小单位，线程依赖于进程而存在，同一进程间的线程间可以无障碍通信，而不同进程间的通信则需要通过端口或 socket 来进行。&lt;/p&gt;

&lt;p&gt;  同一个工作节点上的 Pod 的 IP 属于同一个子网，不同工作节点的子网又属于同一个大子网 (podSubnet，一般需要在初始化集群时定义)。这样的设计在很大程度上减少了 IP 管理的难度，并且能够最大程度上减少容器暴露的风险。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/BV7Jqo.webp&quot; alt=&quot;重绘 Kubernetes 官方文档架构图&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;premonition note&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon note&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-note&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; CRI 的概念 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  CRI，全名为 Container Runtime Interface（容器运行时接口），是 K8S 架构中 kubelet和容器运行时通信的主要协议。我们所熟知的 Docker 就是一种容器运行时，但是自从 K8S 1.20 版本弃用 Docker 自带的容器运行时接口 Dockershim 以来，我们只能使用额外的 CRI – &lt;a href=&quot;https://github.com/Mirantis/cri-dockerd&quot;&gt;cri-dockerd&lt;/a&gt; 来调用 Docker。因此推荐使用包含 CRI 的容器运行时 &lt;a href=&quot;https://containerd.io/&quot;&gt;containerd&lt;/a&gt; 或者 &lt;a href=&quot;https://cri-o.io/&quot;&gt;cri-o&lt;/a&gt; 来替代 Docker。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h3 id=&quot;组成部分&quot;&gt;组成部分&lt;/h3&gt;

&lt;p&gt;  由于 K8S 是一款平台无关的容器集群方案，所以官方提供的方案只是一个整体，我们需要自行选择以下各项组件：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;容器运行时 (CRI)&lt;/strong&gt;：如上所述，推荐使用 containerd 或者 cri-o 来替代 docker。下面实践部分将以 containerd 为例。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;网络组件 (CNI, Container Network Interface)&lt;/strong&gt;：K8S 中网络有三种 Node、Pod、Service，其中 Node IP 是节点的 IP，用于连通或者暴露端口。Pod IP 是 Pod 的独立内网 IP，只能在 K8S 集群间访问。Service IP 是多个 Pod 共同组成 Service 后需要互通时使用的，一般仅在 Service 内部可访问，不能被用户访问。K8S 官方文档中 &lt;a href=&quot;https://kubernetes.io/zh-cn/docs/concepts/cluster-administration/addons/#networking-and-network-policy&quot;&gt;联网和网络策略&lt;/a&gt; 列举了很多可用的 CNI，这里我们选用 &lt;a href=&quot;https://www.tigera.io/project-calico/&quot;&gt;Calico&lt;/a&gt; 来进行实践。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;服务发现 (DNS)&lt;/strong&gt;：默认为 &lt;a href=&quot;https://coredns.io/&quot;&gt;CoreDNS&lt;/a&gt;，在配置完网络组件后自动创建，为 Pod 提供 DNS 解析服务，包括公网域名解析和 Service 别名解析。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;容器存储接口 (CSI, Container Storage Interface)&lt;/strong&gt;：目前 K8S 基本上移除了大部分的第三方软件相关存储插件，转而通过第三方自行维护的 CSI 来扩充存储类的支持。可以通过查看 K8S 官网文档的 &lt;a href=&quot;https://kubernetes.io/zh-cn/docs/concepts/storage/storage-classes/#provisioner&quot;&gt;存储制备器&lt;/a&gt; 和 kubernetes-csi 的 &lt;a href=&quot;https://kubernetes-csi.github.io/docs/drivers.html&quot;&gt;Drivier&lt;/a&gt; 来了解更多。这里我们选用 NFS 的 CSI Driver 作为例子进行实践。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;搭建-k8s-集群&quot;&gt;搭建 K8S 集群&lt;/h2&gt;

&lt;p&gt;  在学习环境中，我们可以使用 &lt;a href=&quot;https://kind.sigs.k8s.io/&quot;&gt;kind&lt;/a&gt;、&lt;a href=&quot;https://minikube.sigs.k8s.io/&quot;&gt;minikube&lt;/a&gt; 或者 kubeadm 在本地快速部署 K8S 集群；在生产环境中，我们可以使用 &lt;a href=&quot;https://kops.sigs.k8s.io/&quot;&gt;kops&lt;/a&gt;、&lt;a href=&quot;https://kubespray.io/&quot;&gt;Kubespray&lt;/a&gt; 或者 kubeadm 在多节点上快速部署 K8S 集群。所以这里我们采用了通用的 kubeadm 来搭建 K8S 集群。&lt;/p&gt;

&lt;p&gt;  在正式部署之前需要规划实际架构、做一些基本准确以及安装必要的软件和工具 – &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubelet&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm&lt;/code&gt;。下图为本实践规划的 NodeSubset、PodSubset 和 ServiceSubset。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/Z0hCRO.webp&quot; alt=&quot;K8S 集群实际架构和网络规划&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;基本准备&quot;&gt;基本准备&lt;/h3&gt;

&lt;h4 id=&quot;关闭-swap-交换分区&quot;&gt;关闭 SWAP 交换分区&lt;/h4&gt;

&lt;p&gt;  K8S 为了性能考虑默认必须关闭 SWAP 交换分区，而通常实体服务器安装后会有 SWAP 交换分区，云服务器或 VPS 没有。通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo swapoff -a&lt;/code&gt; 命令可以临时关闭 SWAP 分区，或者通过注释 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/fstab&lt;/code&gt; 文件中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;swap.img&lt;/code&gt; 这一行并重启服务器永久关闭 SWAP 交换分区。&lt;/p&gt;

&lt;h4 id=&quot;开启-ipv4-转发&quot;&gt;开启 IPv4 转发&lt;/h4&gt;

&lt;p&gt;  由于 K8S 集群中同一个 Service 的 Pod 可能被分配到不同节点，那么不同节点间的 Pod 通信是非常必要的，即不同 PodSubnet 之间的通信需要通过 Node IP 来进行 IPv4 转发。执行以下命令添加允许 IPv4 转发到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/sysctl.d/k8s.conf&lt;/code&gt; 文件里，并且立即生效：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 添加配置&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; /etc/sysctl.d/k8s.conf &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
net.ipv4.ip_forward = 1
net.bridge.bridge-nf-call-iptables = 1
net.bridge.bridge-nf-call-ip6tables = 1
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 立即生效&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;sysctl &lt;span class=&quot;nt&quot;&gt;--system&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;配置主机名对应&quot;&gt;配置主机名对应&lt;/h4&gt;

&lt;p&gt;  K8S 集群初始化时会自动搜索主机名的 DNS 解析，目前测试的主机名没有完整的 FQDN 或 PTR 解析，因此有必要设置好主机名和 IP 对应信息到本地静态 DNS 解析文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/hosts&lt;/code&gt; 中。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 分别在不同节点根据规划设置好主机名&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;hostnamectl set-hostname vm01
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;hostnamectl set-hostname vm02
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;hostnamectl set-hostname vm03

&lt;span class=&quot;c&quot;&gt;# 修改所有节点的 /etc/hosts&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; /etc/hosts &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
192.168.120.1  vm01
192.168.120.2  vm02
192.168.120.3  vm03
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;同步时间&quot;&gt;同步时间&lt;/h4&gt;

&lt;p&gt;  K8S 集群的运行必须保证节点的时间是完全同步的，否则容易造成某些未知的 Bug。比如证书的过期时间将会被某些时间不同步的节点错误判断。推荐使用同一时区和同一 NTP 服务器，如下即可完成设置。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 设置相同时区并查看&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;timedatectl set-timezone Asia/Shanghai
timedatectl
timedatectl status

&lt;span class=&quot;c&quot;&gt;# 修改 NTP 服务器&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;timedatectl set-ntp &lt;span class=&quot;nb&quot;&gt;false
sudo sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;s/#NTP=/NTP=ntp.lisz.top/&apos;&lt;/span&gt; /etc/systemd/timesyncd.conf
&lt;span class=&quot;nb&quot;&gt;sudo sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;s/#FallbackNTP=ntp.ubuntu.com/FallbackNTP=ntp.aliyun.com/&apos;&lt;/span&gt; /etc/systemd/timesyncd.conf
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;timedatectl set-ntp &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 重启服务使配置生效、同步时间并查看信息&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart systemd-timesyncd
timedatectl show-timesync &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装必要软件和工具&quot;&gt;安装必要软件和工具&lt;/h3&gt;

&lt;h4 id=&quot;安装-containerd&quot;&gt;安装 containerd&lt;/h4&gt;

&lt;p&gt;  containerd 虽然是由  containerd 开发团队负责发布，但是 APT 或 YUM 镜像源仍然是由 Docker 官方负责，所以当我们添加 docker-ce 的镜像源后可以直接下载 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;containerd.io&lt;/code&gt; 来安装 containerd。当然， 我们可以从 &lt;a href=&quot;https://github.com/containerd/containerd/releases&quot;&gt;containerd/containerd&lt;/a&gt; 直接下载二进制可执行文件。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 添加镜像源&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu/gpg | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--dearmor&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /etc/apt/trusted.gpg.d/docker.gpg
&lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; /etc/apt/sources.list.d/docker.list &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    deb [arch=amd64 signed-by=/etc/apt/trusted.gpg.d/docker.gpg] https://mirrors.tuna.tsinghua.edu.cn/docker-ce/linux/ubuntu/ &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;lsb_release &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--short&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; stable
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 更新软件列表缓存并安装 containerd&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt upgrade &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; containerd.io
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小建议 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  个人推荐使用 APT 或 YUM 方式安装 containerd。原因有二：一是国内有 docker-ce 镜像安装比较快，二是想要更新时非常容易。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h4 id=&quot;配置-containerd&quot;&gt;配置 containerd&lt;/h4&gt;

&lt;p&gt;  containerd 安装后默认没有配置文件也不会自动启动后台程序，所以需要准备配置文件并复制到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/containerd/config.toml&lt;/code&gt; 再启动。由于 K8S 集群默认使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registry.k8s.io&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registry-1.docker.io&lt;/code&gt; 源下载容器镜像，为了提升速度建议切换到阿里云和 DaoCloud 的加速器。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;containerd config default &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; containerd_config.toml
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s#registry.k8s.io#registry.cn-hangzhou.aliyuncs.com/google_containers#g&quot;&lt;/span&gt; containerd_config.toml
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;/containerd.runtimes.runc.options/a&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\ \ \ \ \ \ \ \ \ \ \ \ &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;SystemdCgroup = true&quot;&lt;/span&gt; containerd_config.toml
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s#https://registry-1.docker.io#https://docker.m.daocloud.io#g&quot;&lt;/span&gt; containerd_config.toml

&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /etc/containerd
&lt;span class=&quot;nb&quot;&gt;cp &lt;/span&gt;containerd_config.toml /etc/containerd/config.toml

&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl daemon-reload
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;containerd
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart containerd

&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl status containerd.service &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ctr &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小提示 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  由于 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctr&lt;/code&gt; 命令连接的 containerd 的 socket 文件只有 root 用户组有权限访问，所以目前只能使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo ctr&lt;/code&gt;。如果想要直接使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ctr&lt;/code&gt; 命令，可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo usermod -aG root ubuntu&lt;/code&gt; 来将当前用户添加到 root 用户组。赋权之后需退出登录后再次登录才能生效。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h4 id=&quot;安装-kubeadm-等&quot;&gt;安装 kubeadm 等&lt;/h4&gt;

&lt;p&gt;  国内清华大学 TUNA 镜像源、阿里云镜像源等都提供了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm&lt;/code&gt; 等三件套工具的 APT 或 YUM 源，通过以下命令可以很容易完全安装。&lt;/p&gt;

&lt;div class=&quot;premonition warning&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon warning&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-warning&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 友情提醒 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  由于 kubernetes 不同版本可能会存在较大差异，并且为了避免节点 kubernetes 版本在不自觉的时候升级造成兼容性问题，这里推荐固定 kubeadm 等三件套版本号，即不启用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt upgrade&lt;/code&gt; 自动升级。管理员关闭 K8S 集群手动升级版本时不受影响。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 添加镜像源&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://mirrors.tuna.tsinghua.edu.cn/kubernetes/core:/stable:/v1.30/deb/Release.key | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--dearmor&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /etc/apt/keyrings/kubernetes-apt-keyring.gpg 
&lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; /etc/apt/sources.list.d/kubernetes.list &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://mirrors.tuna.tsinghua.edu.cn/kubernetes/core:/stable:/v1.30/deb/ / 
# deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://mirrors.tuna.tsinghua.edu.cn/kubernetes/addons:/cri-o:/stable:/v1.30/deb/ / 
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 更新软件列表缓存并安装 kubeadm 三件套&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; kubeadm kubelet kubectl 

&lt;span class=&quot;c&quot;&gt;# 固定 kubeadm 等三件套版本&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-mark hold kubeadm 
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-mark hold kubelet 
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-mark hold kubectl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;初始化集群&quot;&gt;初始化集群&lt;/h3&gt;

&lt;h4 id=&quot;预下载镜像&quot;&gt;预下载镜像&lt;/h4&gt;

&lt;p&gt;  在所有节点上使用以下命令提前下载好 K8S 集群所需的基本镜像，避免初始化时一直在等待各个节点下载镜像。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubeadm config images list | &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;s/^/sudo ctr image pull /g&apos;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-e&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;s#registry.k8s.io#registry.cn-hangzhou.aliyuncs.com/google_containers#g&apos;&lt;/span&gt; | sh &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;初始化控制节点&quot;&gt;初始化控制节点&lt;/h4&gt;

&lt;p&gt;  下载完所需的容器镜像后，在控制节点上使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo kubeadm init --config=kubeadm_config.yaml&lt;/code&gt; 命令初始化控制节点。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubeadm_config.yaml&lt;/code&gt; 的内容如下所示：（建议将配置文件放置在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/k8s&lt;/code&gt; 目录下，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd ~/k8s&lt;/code&gt; 目录后执行初始化命令。）&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubeadm.k8s.io/v1beta3&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;InitConfiguration&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;localAPIEndpoint&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;advertiseAddress&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;192.168.120.1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;bindPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6443&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;nodeRegistration&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;criSocket&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;unix:///run/containerd/containerd.sock&quot;&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubeadm.k8s.io/v1beta3&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterConfiguration&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kubernetesVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;stable&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;imageRepository&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;registry.cn-hangzhou.aliyuncs.com/google_containers&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;networking&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;podSubnet&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;192.168.144.0/20&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;serviceSubnet&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;192.168.244.0/24&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition warning&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon warning&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-warning&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 友情提醒 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  如果没有配置主机名对应的话，这里初始化会一直卡在 API Health 检测的步骤，实际上是因为没有主机名和 IP 对应而无法启动 API Server。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;p&gt;  kubeadm 初始化成功后需要复制验证文件才能在控制节点管理 K8S 集群，如下所示：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 复制验证文件&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube
&lt;span class=&quot;nb&quot;&gt;sudo cp&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; /etc/kubernetes/admin.conf &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube/config
&lt;span class=&quot;nb&quot;&gt;sudo chown&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;:&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/.kube/config

&lt;span class=&quot;c&quot;&gt;# 查询节点状态&lt;/span&gt;
kubectl get nodes &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; wide
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;工作节点加入集群&quot;&gt;工作节点加入集群&lt;/h4&gt;

&lt;p&gt;  刚才初始化集群后会出现工作节点加入集群的命令，形如：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubeadm &lt;span class=&quot;nb&quot;&gt;join &lt;/span&gt;192.168.120.1:6443 &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt; z9sdsdi.tdeu74psxqi8rhdt &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;--discovery-token-ca-cert-hash&lt;/span&gt; sha256:87c4f8dd9dabaf2e5e793c0404c74dd8f9f56153000dad3c1a3238a3e8b0beff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  注意这里需要加上 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; 之后再在工作节点上执行加入集群操作。加入完成后可以在控制节点上使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl get nodes -o wide&lt;/code&gt; 查看是否有了刚加入的工作节点的信息。由于目前还没有配置网络组件，除了控制节点外，其他工作节点应该均为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NotReady&lt;/code&gt; 状态。如果使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl get pods --all-namespaces&lt;/code&gt; 命令查看所有启动的 Pod，应该看到除两个 CordDNS 的 Pod (比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0/1&lt;/code&gt;) 以外的所有 Pod 的状态都是完成启动 (比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1/1&lt;/code&gt;)。&lt;/p&gt;

&lt;p&gt;  工作节点加入后可以配置不同的标签，比如如下是配置为工作节点和添加 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gputype&lt;/code&gt; 字段标签：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl label node vm02 node-role.kubernetes.io/worker&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
kubectl label node vm03 node-role.kubernetes.io/worker&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
kubectl label node vm02 &lt;span class=&quot;nv&quot;&gt;gputype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;P100
kubectl label node vm03 &lt;span class=&quot;nv&quot;&gt;gputype&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;A100
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;添加组件&quot;&gt;添加组件&lt;/h3&gt;

&lt;h4 id=&quot;配置-calico-网络&quot;&gt;配置 Calico 网络&lt;/h4&gt;

&lt;p&gt;  Calico 支持一套灵活的网络选项，可以根据情况选择最有效的选项，包括非覆盖和覆盖网络，带或不带 BGP。Calico 使用相同的引擎为主机、Pod 和应用程序在服务网格层执行网络策略。如下所示可以很简单地为 K8S 集群启用 Calico 网络：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;创建 Calico 所需的 operator（需要镜像 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quay.io/tigera/operator:v1.34.5&lt;/code&gt;，可提前下载），仅在控制节点创建 Pod；&lt;/li&gt;
  &lt;li&gt;创建和初始化 K8S 集群时对应的网络规划，主要是 PodSubset 配置，如下面修改过的 yaml 配置文件。这里为了加速创建过程，还添加了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registry&lt;/code&gt; 字段来使用 DaoCloud 加速器。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/k8s/calico &amp;amp; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/k8s/calico
wget &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; https://raw.githubusercontent.com/projectcalico/calico/v3.28.1/manifests/tigera-operator.yaml
wget &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; https://raw.githubusercontent.com/projectcalico/calico/v3.28.1/manifests/custom-resources.yaml 
kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; tigera-operator.yaml 
kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; custom-resources.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# This section includes base Calico installation configuration.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# For more information, see: https://docs.tigera.io/calico/latest/reference/installation/api#operator.tigera.io/v1.Installation&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;operator.tigera.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Installation&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Configures Calico networking.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;calicoNetwork&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ipPools&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default-ipv4-ippool&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;blockSize&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;26&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;cidr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;192.168.144.0/20&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;encapsulation&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;VXLANCrossSubnet&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;natOutgoing&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Enabled&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;nodeSelector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;all()&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;registry&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;m.daocloud.io&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section configures the Calico API server.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# For more information, see: https://docs.tigera.io/calico/latest/reference/installation/api#operator.tigera.io/v1.APIServer&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;operator.tigera.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;APIServer&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  如果通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl get pod --all-namespaces&lt;/code&gt; 发现哪个相关 Pod 卡在了拉取镜像的步骤，可以手动镜像。一般来说，使用修改的 DaoCloud 加速器下载应该没什么太大问题。创建 Calico 网络完成后会多出来 3 个命名空间: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tigera-operator&lt;/code&gt;、 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calico-system&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;calico-apiserver&lt;/code&gt;。新增的 Pod 应该如下所示：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;节点主机名&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;新增 Pod&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;备注&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;vm01&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;tigera-operator&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Calico 网络所需的描述子&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;vm01&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;calico-kube-controller&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Calico 网络控制器&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;vm01&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;calico-apiserver&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Calico 网络 API，一般有两个 Pod&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;vm01&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;calico-typha&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;优化和减少 Calico 对 K8S API 服务器的负载&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;vm01&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;calico-node&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Calico 网络节点客户端&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;vm01&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;csi-node-driver&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;CSI 驱动&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;vm02&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;calico-typha&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;优化和减少 Calico 对 K8S API 服务器的负载&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;vm02&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;calico-node&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Calico 网络节点客户端&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;vm02&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;csi-node-driver&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;CSI 驱动&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;vm03&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;calico-node&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Calico 网络节点客户端&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;vm03&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;csi-node-driver&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;CSI 驱动&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;配置-nfs-csi-驱动和存储类&quot;&gt;配置 NFS CSI 驱动和存储类&lt;/h4&gt;

&lt;p&gt;  NFS CSI 驱动由 &lt;a href=&quot;https://github.com/kubernetes-csi/csi-driver-nfs&quot;&gt;kubernetes-csi/csi-driver-nfs&lt;/a&gt; 项目提供支持。不过在正式安装驱动之前需要先安装 NFS 客户端，否则 NFS CSI 驱动也无法正常启用。为了加速下载容器镜像，这里推荐将配置中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;registry.k8s.io&lt;/code&gt; 源切换到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;k8s.m.daocloud.io&lt;/code&gt; 加速器。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 在所有节点安装 NFS 客户端支持&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; nfs-common

&lt;span class=&quot;c&quot;&gt;# 下载 NFS CSI Driver 配置文件&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; ~/k8s/csi &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/k8s/csi
git clone https://github.com/kubernetes-csi/csi-driver-nfs.git 

&lt;span class=&quot;c&quot;&gt;# 修改容器镜像为 DaoCloud 加速器&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;csi-driver-nfs/deploy/v4.9.0
&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/registry.k8s.io/k8s.m.daocloud.io/&quot;&lt;/span&gt; ./&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 返回上上层目录，并安装 NFS CSI 驱动&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../../
./deploy/install-driver.sh v4.9.0 &lt;span class=&quot;nb&quot;&gt;local&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  安装 NFS CSI 驱动后会在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kube-system&lt;/code&gt; 命名空间中多出四个 Pod，其中一个 Pod 为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;csi-nfs-controller&lt;/code&gt;，其他每个节点一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;csi-nfs-node&lt;/code&gt; 的 Pod。然后需要使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;kubectl apply -f nfs.yaml&lt;/code&gt; 命令创建一个 NFS 的存储类用于提供给应用程序，配置文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nfs.yaml&lt;/code&gt; 内容如下所示：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;storage.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;StorageClass&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nfs-csi&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;annotations&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;storageclass.kubernetes.io/is-default-class&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;true&quot;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;provisioner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nfs.csi.k8s.io&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nfs_server_ip&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;share&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/home/data&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;reclaimPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Retain&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;volumeBindingMode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Immediate&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;allowVolumeExpansion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;mountOptions&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;async&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rsize=32768&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;wsize=32768&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nconnect=8&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;nfsvers=4.1&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hard&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查看新增的存储类&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;kubectl get sc
NAME                PROVISIONER      RECLAIMPOLICY   VOLUMEBINDINGMODE   ALLOWVOLUMEEXPANSION   AGE
nfs-csi &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   nfs.csi.k8s.io   Retain          Immediate           &lt;span class=&quot;nb&quot;&gt;true                   &lt;/span&gt;4d1h
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;gpu-支持&quot;&gt;GPU 支持&lt;/h4&gt;

&lt;p&gt;  K8S 的 GPU 支持是由 NVIDIA 提供的，需要工作节点先安装 NVIDIA 驱动和容器驱动，再在控制节点上部署 nvidia-device 插件支持。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查看可安装 NVIDIA 驱动&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ubuntu-drivers devices
modalias : pci:v000010DEd000026BAsv000010DEsd00001957bc03sc02i00
vendor   : NVIDIA Corporation
driver   : nvidia-driver-550-open - distro non-free
driver   : nvidia-driver-550 - distro non-free recommended
driver   : nvidia-driver-535-server - distro non-free
driver   : nvidia-driver-535-server-open - distro non-free
driver   : nvidia-driver-535-open - distro non-free
driver   : nvidia-driver-535 - distro non-free
driver   : xserver-xorg-video-nouveau - distro free &lt;span class=&quot;nb&quot;&gt;builtin&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 安装 NVIDIA 驱动，并重启生效&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; nvidia-driver-535
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-mark hold nvidia-driver-535

&lt;span class=&quot;c&quot;&gt;# 添加 NVIDIA Container Toolkit 源&lt;/span&gt;
curl &lt;span class=&quot;nt&quot;&gt;-fsSL&lt;/span&gt; https://mirrors.ustc.edu.cn/libnvidia-container/gpgkey | &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;gpg &lt;span class=&quot;nt&quot;&gt;--dearmor&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /usr/share/keyrings/nvidia-container-toolkit-keyring.gpg &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; curl &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-L&lt;/span&gt; https://mirrors.ustc.edu.cn/libnvidia-container/stable/deb/nvidia-container-toolkit.list | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;s#deb https://#deb [signed-by=/usr/share/keyrings/nvidia-container-toolkit-keyring.gpg] https://#g&apos;&lt;/span&gt; | &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;sudo tee&lt;/span&gt; /etc/apt/sources.list.d/nvidia-container-toolkit.list

&lt;span class=&quot;c&quot;&gt;# 更新软件列表缓存，安装 nvidia-container-toolkit&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; nvidia-container-toolkit

&lt;span class=&quot;c&quot;&gt;# 为 containerd 容器运行时增加 NVIDIA 选项&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;nvidia-ctk runtime configure &lt;span class=&quot;nt&quot;&gt;--runtime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;containerd

&lt;span class=&quot;c&quot;&gt;# 修改 /etc/containerd/config.toml 配置文件中默认运行时为 NVIDIA&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 原来的默认运行时是 runc&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;plugins.&lt;span class=&quot;s2&quot;&gt;&quot;io.containerd.grpc.v1.cri&quot;&lt;/span&gt;.containerd]
      default_runtime_name &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;nvidia&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 重新加载 containerd 配置文件并重启服务生效&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl daemon-reload
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;systemctl restart containerd

&lt;span class=&quot;c&quot;&gt;# 在控制节点为 K8S 集群创建 NVIDIA device 插件支持&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ~/k8s
wget &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; https://raw.githubusercontent.com/NVIDIA/k8s-device-plugin/v0.16.2/deployments/static/nvidia-device-plugin.yml

&lt;span class=&quot;nb&quot;&gt;sed&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s/nvcr.io/nvcr.m.daocloud.io/&quot;&lt;/span&gt; nvidia-device-plugin.yml
kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; nvidia-device-plugin.yml

&lt;span class=&quot;c&quot;&gt;# 验证 GPU 是否被 K8S 识别&lt;/span&gt;
kubectl describe node vm02 | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;nvidia.com/gpu:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小提示 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  NVIDIA GPU 驱动和容器驱动只需在有 NVIDIA GPU 的工作节点上配置，并且&lt;strong&gt;一定要修改默认运行时为 NVIDIA&lt;/strong&gt;，否则无法被 K8S 识别。NVIDIA device 插件支持在控制节点上提交安装请求但会在每一个工作节点上安装，即使没有 NVIDIA GPU 存在。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h2 id=&quot;可能遇到的问题和解答&quot;&gt;可能遇到的问题和解答&lt;/h2&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 如果各节点本身没有任何网络，需要使用内部 HTTP 代理上网怎么办？ &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  这种情况下需要为 kubelet 和 containerd 的 service 设置代理。kubelet 的配置文件为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf&lt;/code&gt;，containerd 的配置文件为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/usr/lib/systemd/system/containerd.service&lt;/code&gt;。配置内容如下所示。配置完后需要使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo systemctl daemon-reload&lt;/code&gt; 来应用配置更改，并且使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo systemctl restart kubelet&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo systemctl restart containerd&lt;/code&gt; 重启服务。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# sudo vim /usr/lib/systemd/system/containerd.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# sudo vim /usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
...
&lt;span class=&quot;nv&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HTTP_PROXY=http://proxy.ip:3128&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HTTPS_PROXY=http://proxy.ip:3128&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;NO_PROXY=localhost,127.0.0.1&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;  K8S 集群的搭建并非一件十分复杂的事情，比较复杂的是根据实际的需求和自己对于 K8S 的理解来搭建出更合适的 K8S 集群。虽然 K8S 集群已经逐步开始取代一般的 Docker 单机应用服务部署方案，但是就个人实际的应用规模或者应用本身而言，K8S 集群本身的维护和调整的代价要远高于 Docker 单机应用服务部署。如果是有高可用性、高可靠性等的需求，那么 K8S 可能是目前最好的需求。&lt;/p&gt;

&lt;p&gt;  正如在前言中所述，有了 K8S 持续开发、持续集成和持续部署成为了现实，开发者可以把更多的注意力都放在应用代码开发。同时，类似于 JupyterHub 这类会有动态扩展和分配资源需求的应用，最佳的部署方式可能就是 K8S 了。当然，听说现在的大模型 ChatGPT 等也都是在 K8S 上训练出来的。&lt;/p&gt;

&lt;p&gt;  K8S 的确是大有可为！&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.blackduck.com/en-us/glossary/what-is-continuous-development.html&quot;&gt;Continuous Development&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/cn/devops/continuous-integration/&quot;&gt;AWS – 什么是持续集成？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ibm.com/topics/continuous-deployment&quot;&gt;IBM – What is continuous deployment?&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://circleci.com/blog/docker-swarm-vs-kubernetes/&quot;&gt;Docker Swarm vs Kubernetes: how to choose a container orchestration tool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-cn/Kubernetes&quot;&gt;维基百科 – Kubernetes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ibm.com/blogs/solutions/jp-ja/container-cocreation-center-05/&quot;&gt;IBM – 第5回 『Red Hat OpenShift と Kubernetes の違い』&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/zh-cn/docs/concepts/architecture/&quot;&gt;Kubernetes 文档 - 概念 - Kubernetes 架构&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1852347&quot;&gt;基于 Containerd 运行时搭建 Kubernetes 集群实践&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 08 Oct 2024 16:50:00 +0900</pubDate>
        <link>https://lisz.me/tech/k8s/k8s-introduction.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/k8s/k8s-introduction.html</guid>
        
        <category>Kubernetes</category>
        
        <category>K8S</category>
        
        <category>kubeadm</category>
        
        <category>calico</category>
        
        <category>flannel</category>
        
        <category>csi-driver</category>
        
        <category>NFS</category>
        
        
        <category>tech</category>
        
        <category>k8s</category>
        
      </item>
    
      <item>
        <title>生活中的小问题——公交计费问题</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  谈到生活中经常坐的公交车，比较常见的算法问题可能是寻找“耗时最少公交路线”、“最少换乘公交路线”、“最便宜公交路线”、“综合最优公交路线”等。这些算法由于在地图软件中经常被使用，已经被大家研究得非常透彻，比如 Dijkstra 算法就可以用来计算“最短距离公交路线”。如想了解更多，可以阅读参考资料 2 给出的中文文献。&lt;/p&gt;

&lt;p&gt;  相比这些常见的算法问题，不如让我们来一起看看不大被人提及的“公交计费问题”。笔者经常在下雨的时候乘坐公交车，每次上车前会先取一张票，然后下车前可以看屏幕显示来知道票价。于是笔者就有了一个小问题：票价是如何正确显示的，是否可以对其建模并写个小程序模拟一下。&lt;/p&gt;

&lt;h2 id=&quot;问题描述&quot;&gt;问题描述&lt;/h2&gt;

&lt;p&gt;  如图 1 所示为公交计费问题描述。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;(a) 公交路线图&lt;/strong&gt;（图中为右循环路线，但对应的左循环路线也存在），0~20 为站点编号，且 1~3 与 20~18 分别对应相同。公交从站点 0 出发，按照箭头所指的方向依次行进，最终回到站点 0 并停止运行。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;(b) 相邻站点间距离&lt;/strong&gt;，以 km 为距离计算单位，给出的数值为公交在站点间实际行进距离。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;(c) 公交票价计算方式&lt;/strong&gt;，距离不足 2 km 为基本票价 190 日元，超过 2 km 的话每超过 1 km 加收 50 日元，如不足 1 km 按照 1 km 计算。注意，此处的距离为循环线路中上车站点与下车站点的&lt;strong&gt;有效距离&lt;/strong&gt;，即站点间在循环线路上的最短距离而非实际运行距离。比如，即使从站点 0 上车，经过一圈循环后再从站点 0 下车，也只能收取基本票价 190 日元，因为有效距离为 0 km。（以上计算方式参考自资料 3）&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;(d) 公交最后返回起始站点时计费状态&lt;/strong&gt;，灰底色为站点编号，白底色为票价。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/GTgvbN.webp&quot; alt=&quot;图 1. 公交计费问题描述。 The description of bus ticket problem.&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;问题目标&quot;&gt;问题目标&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;打印欢迎消息，提示是否从站点 0 发车；&lt;/li&gt;
  &lt;li&gt;发车后，通过回车或其他操作在下一站点停车，打印当前票价状态，尚未抵达站点票价为空；&lt;/li&gt;
  &lt;li&gt;经过循环后回到站点 0，通过回车或其他操作停车，打印当前票价状态，如图 1(d) 所示。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;解决方案&quot;&gt;解决方案&lt;/h2&gt;

&lt;h3 id=&quot;问题分析&quot;&gt;问题分析&lt;/h3&gt;

&lt;p&gt;  解决公交计费问题，首先要将图 1 中给出的信息进行集成，可得如下图 2。其中，站点间的橙色数字为相邻站点间距离，红色数字为几个关键（0~2 km，2~3 km 和 3~4 km 的阈值站点）站点与出发站点 0 之间的&lt;strong&gt;有效距离&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/DD2KNn.webp&quot; alt=&quot;图 2. 信息集成后的公交路线图。 The route including the distances and some importance valid distances.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  其实整个问题的核心就在于对&lt;strong&gt;有效距离&lt;/strong&gt;的理解。从题干可知，有效距离并非是实际行进距离。这主要是因为给出的公交路线是环线而非直线，即出发站点与结束站点为同一站点。除此之外，刚开始的 1~3 与最后的 20~18 三个站点是重合的。根据给出的例子解释，我们可以将这里的“&lt;strong&gt;有效距离&lt;/strong&gt;”粗略定义为“&lt;strong&gt;上车站点与下车站点在公交路线上正反距离的最小值&lt;/strong&gt;”。我们不妨从以下示例中进一步加深对于“&lt;strong&gt;有效距离&lt;/strong&gt;”的理解：（~ 表示“大约”）&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;例 1&lt;/strong&gt;：上车站点为站点 3，下车站点为站点 17。因为站点 3 与站点 18 重合，所以有效距离等同于站点 17 和 18 之间的距离 0.45 km。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;例 2&lt;/strong&gt;：上车站点为站点 5，下车站点为站点 18。如例 1 方式计算可得有效距离为 0.85 km。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;例 3&lt;/strong&gt;：上车站点为站点 4，下车站点为站点 17。虽然按照路线实际行进距离很远，但是实际两站之间路线上最短距离大约为 0.45 km，即有效距离为 ~0.45 km。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;例 4&lt;/strong&gt;：上车站点为站点 5，下车站点为站点 15。如例 2 方式计算可得有效距离为 ~1.6 km。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;例 5&lt;/strong&gt;：上车站点为站点 6，下车站点为站点 14。按照图中方向实际行进距离计算，可知正向距离为 2.75 km，按照路线上最短反向距离为 ~2.25 km，因此有效距离为 ~2.25 km。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;得出总结：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;从例 1、2 可以看出，当上车站点和下车站点分别在重合直线和循环圈上时，位于重合直线上的站点需要注意切换到对应站点进行双重计算正反向距离，从而得到正确的有效距离。&lt;/li&gt;
  &lt;li&gt;从例 3~5 可以看出，当上车站点和下车站点均在循环圈上时，计算反向距离不涉及直线站点（即跨过出发站点 0）。即使站点 17 到站点 4 的实际行进路线不存在，也需以站点 17 到站点 4 闭合的循环圈来进行计算反向距离。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;premonition warning&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon warning&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-warning&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 为何不跨过出发站点 0 计算反向距离？ &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  题干中给出信息“&lt;strong&gt;公交从站点 0 出发最终回到站点 0 并停止运行&lt;/strong&gt;”，鉴于任何跨过出发站点 0 计算的距离实际上只可能由两辆公交车完成，不可能出现在一辆公交的票价计算方式中，当只在循环圈上的站点上下车时应该不考虑直线上的站点（0~3、18~20）。&lt;/p&gt;

&lt;p&gt;  说句题外话，如例 3~5 所示，可能直接走过去还更快更方便，而非坐这趟公交。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h3 id=&quot;算法描述&quot;&gt;算法描述&lt;/h3&gt;

&lt;h4 id=&quot;变量声明&quot;&gt;变量声明&lt;/h4&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;变量名&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;变量类型&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;描述&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;distances&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;list&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;站点列表，[0, 0.2, 0.3, …]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;currentStop&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;int&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;当前站点编号，0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;lineStops&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;list&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;直线站点，[1, 2, 3, 18, 19, 20]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;circleStops&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;list&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;循环圈站点，[4, 5, …, 17]&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ticketBase&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;float&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;基础票价，190.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ticketStep&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;float&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;票价梯度，50.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;ticketUnit&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;str&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;票价单位，JPY&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;baseDistance&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;float&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;基础距离，2.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;stepDistance&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;float&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;基础距离，1.00&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;distanceUnit&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;str&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;距离单位，km&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;validDistances&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;list&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;有效距离，长度为 21，默认值为 None&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;prices&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;list&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;票价，长度为 21，默认值为 None&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;validStops&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;list&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;有效站点，经过站点时将编号添加到列表里，默认为 [0]&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h4 id=&quot;步骤描述&quot;&gt;步骤描述&lt;/h4&gt;

&lt;p&gt;  程序整体步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;初始化变量，当前站点编号为 0，询问是否启动；接受到启动指令（回车）后开始行进（提示）。&lt;/li&gt;
  &lt;li&gt;遇到停车指令（回车）后，切换站点编号为下一站点（+1），添加站点编号到 validStops。&lt;/li&gt;
  &lt;li&gt;循环计算 validStops 中各站点的有效距离 validDistances（具体见下）。&lt;/li&gt;
  &lt;li&gt;循环计算各站点的票价同时更新 prices。&lt;/li&gt;
  &lt;li&gt;打印计费矩阵。&lt;/li&gt;
  &lt;li&gt;接受到启动指令（回车）后继续行进（提示），重复 2~5 步骤直至重新回到站点 0。&lt;/li&gt;
  &lt;li&gt;打印到达终点站提示信息，结束程序。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;  计算任意两个上下车站点间的有效距离的步骤：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;已知上车站点 a 和下车站点 b，当两站点相同时有效距离为 0，如不同进入下一步骤。&lt;/li&gt;
  &lt;li&gt;利用 lineStops 和 circleStops 两个变量判断 a 和 b 位于直线部分或循环圈部分。&lt;/li&gt;
  &lt;li&gt;如果两站点都是直线部分，利用对称方式标准化为 1~3 的站点编号，直接计算之间距离为有效距离。&lt;/li&gt;
  &lt;li&gt;如果两站点都是循环圈部分，利用 circleStops 进行循环遍历叠加计算正反距离，取较小的值为有效距离。&lt;/li&gt;
  &lt;li&gt;如果一站点在直线部分、一站点在循环圈部分，对直线部分的站点（标准化后的 1~3 站点）计算正反距离，取较小的值为有效距离。&lt;/li&gt;
  &lt;li&gt;返回有效距离。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;程序模拟&quot;&gt;程序模拟&lt;/h3&gt;

&lt;p&gt;  根据以上思路，笔者采用 Python 实现了解决方案。源代码请见 &lt;a href=&quot;https://gist.github.com/zhonger/3546f08c0fe5b3e4ea360288a6b15d42&quot;&gt;Github Gist&lt;/a&gt;。以下为程序模拟运行效果：&lt;/p&gt;

&lt;script src=&quot;https://asciinema.org/a/666775.js&quot; id=&quot;asciicast-666775&quot; async=&quot;true&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;  虽然现有的公交线路大部分还是很规则的，不同时存在循环圈和直线的情况，计费也较为简单，但是思考特殊公交线路的计费方式也不失为一件有趣的事情。上面给出的分析和算法描述，也可以用其他编程语言实现，比如用前端编程语言就可以直接可视化整个公交计费过程。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.freecodecamp.org/chinese/news/dijkstras-shortest-path-algorithm-visual-introduction/&quot;&gt;图文详解 Dijkstra 最短路径算法&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhangroup.aporc.org/images/files/1.pdf&quot;&gt;周文峰等，《运筹与管理》，&lt;strong&gt;最优公交线路选择问题的数学模型及算法&lt;/strong&gt;，2018&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.kantetsu.co.jp/cms/wp-content/uploads/2024/02/801e8420390b8e91fa42443e742d6c27.pdf&quot;&gt;筑波大学循环线票价表&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Tue, 02 Jul 2024 15:15:00 +0900</pubDate>
        <link>https://lisz.me/tech/algorithm/bus-ticket.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/algorithm/bus-ticket.html</guid>
        
        <category>algorithm</category>
        
        <category>算法</category>
        
        <category>program</category>
        
        <category>代码实现</category>
        
        <category>python</category>
        
        
        <category>tech</category>
        
        <category>algorithm</category>
        
      </item>
    
      <item>
        <title>命令行工具开发指南——入门篇</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  &lt;strong&gt;命令行工具&lt;/strong&gt;（Command Line，Cli）作为我们日常开发常用的辅助性工具，几乎遍布于各种操作中。根据&lt;strong&gt;使用目的&lt;/strong&gt;的不同大致可以分为以下几类：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;从模板中生成项目&lt;/strong&gt;：比如使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;npm init&lt;/code&gt; 从空模版创建一个新的 NodeJS 项目，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;composer create-project laravel/laravel example-app&lt;/code&gt; 创建一个全新的 Laravel 项目（PHP 项目）等。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;启用开发者服务模式&lt;/strong&gt;：比如使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python -m http.server 8000&lt;/code&gt; 在 8000 端口开启一个临时 HTTP 服务器，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll s&lt;/code&gt; 在 4000 端口开启一个临时 Jekyll 服务器等。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;特定功能交互&lt;/strong&gt;：比如流行的 IP 信息查询工具 &lt;a href=&quot;https://github.com/zu1k/nali&quot;&gt;nali&lt;/a&gt;、磁盘空间利用率和空余空间查询工具 &lt;a href=&quot;https://github.com/muesli/duf&quot;&gt;duf&lt;/a&gt;、快速磁盘使用分析工具 &lt;a href=&quot;https://github.com/dundee/gdu&quot;&gt;gdu&lt;/a&gt; 等。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  其实任何编程语言都可以用来开发命令行工具，无论是常见的 Golang、Python、NodeJS、PHP、Java，还是 Rust、Ruby、C++、C 或者是古老的 Fortran 等。只是取决于所要实现的功能和具体的使用场景，开发者会采用合适的编程语言开发命令行工具。比如说，Linux 系统中包含了大量的命令行工具，基本上都是用 C 语言编写的，主要是因为 C 语言在 Linux 系统中的执行效率相对更高。对于一般高级编程语言，自带的包管理工具也是由自身高级编程语言编写的命令行工具。类似 Rust、Fortran 等编译型语言则需要通过编译生成&lt;strong&gt;二进制可执行文件&lt;/strong&gt;后才能执行相应的任务。&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 二进制可执行文件与源文件有何不同？ &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;   二进制可执行文件是指源代码通过编译器编译成计算机可以直接识别的二进制码文件。二进制码文件是无法使用任何源码编辑器打开的，只能由操作系统调用执行或特别的二进制码查看器打开。一般来说，二进制可执行文件是很难跨越操作系统的，即针对不同的操作系统需要分别编译生成对应的二进制可执行文件。&lt;u&gt;尤其是当有其他静态库或者动态链接库依赖时，二进制可执行文件甚至无法跨主机运行&lt;/u&gt;。 而源文件是可以在任何操作系统用源码编辑器打开的。大多时候商业公司为了保证源代码的商业版权，只会为用户提供应用的二进制可执行文件。（当然一般可能是包含图形用户界面的。）&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h2 id=&quot;为何命令行而非图形界面&quot;&gt;为何命令行而非图形界面&lt;/h2&gt;

&lt;p&gt;  命令行可以说是操作系统应用和编程语言编写应用最基本的形式，图形（用户）界面（Graphic User Interface，GUI）则是在源代码的基础上提供可视化的交互方式、通过键鼠操作来降低用户使用的门槛。这也是为什么 Windows 操作系统比 Linux 操作系统更加流行的原因之一。&lt;strong&gt;但是有的时候，界面也有可能会成为用户学习和使用的累赘。&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;简单界面-vs-复杂界面&quot;&gt;简单界面 vs 复杂界面&lt;/h3&gt;

&lt;p&gt;  就拿代码编辑器来说，我们所熟知的“宇宙第一编辑器” Visual Studio 几乎支持所有编程语言，尤其是对于构建 C# 项目来说可以&lt;strong&gt;半代码半可视化修改&lt;/strong&gt;。尽管这在很大程度上降低了开发者使用成本，但是学习 Visual Studio 编辑器本身的成本却很高。（说句老实话，笔者从大学本科开始接触 Visual Studio 到现在都没怎么学会使用，😂只会最基本的功能而已。）而且，在普通笔记本电脑上使用 Visual Studio 编辑器运行大型项目时，CPU 和内存资源极大可能会被大量占用，打开一个浏览器页面可能也很艰难。&lt;/p&gt;

&lt;p&gt;  相比而言，同样由微软推出的 Visual Studio Code 则是简单界面的优秀代表。化繁为简，Visual Studio Code 本身仅支持最简单的功能：文件目录区、编辑区、终端区三部分布局，基本的代码高亮功能，插件功能，主题功能等。无论是 Python 开发者，还是 Golang 开发者，都能一打开直接上手，只是需要根据编程语言不同安装一些插件来提升开发效率而已。在系统占用资源方面，Visual Studio Code 比 Visual Studio 显著降低，尽管可能也会受安装插件的少量影响。当然有得也有舍，Visual Studio Code 中支持更多文件定义配置或命令行配置，对于没有学过 Linux 的用户可能会有点学习难度。&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; Linux 哲学 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  “一切皆文件”。任何系统、项目、工具都是由一系列的文件组成的，通过配置文件可以实现直接管理。&lt;/p&gt;

&lt;p&gt;  虽然这是 Linux 系统设计的哲学思想，但其实是所有操作系统设计的哲学思想，只是顶层封装的程度有所不同。Windows 系统也是“一切皆文件”的，不然那些编辑器的配置都存在哪里了呢。相比 Linux 和 MacOS 系统而言，Windows 系统的顶层封装程度最高，用户对于底层文件的直接管理非常少，尤其是对系统级别的配置管理只能通过图形界面交互完成。MacOS 系统则是介于两者之间，顶层封装程度虽然高但也提供对大部分系统级别配置的直接管理，即可以通过修改文件来实现管理。尽管依旧存在有些系统级别配置难以直接修改，比如说操作系统启动项。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h3 id=&quot;更简单的命令行&quot;&gt;更简单的命令行&lt;/h3&gt;

&lt;p&gt;  界面在执行系列任务时一般需要多步操作，一顿点点点之后才能完成。当然如果图形界面和功能设计的比较合理的话，可能也只需要一步操作。当我们需要进行批量操作时，即使图形界面只需要一步操作，依旧需要一顿点点点。命令行则没有这种问题，只需要简单写个有循环的脚本即可循环调用命令行工具批量执行。&lt;/p&gt;

&lt;p&gt;  另外，命令行工具仅在执行时会占用系统资源，一旦完成即可完全释放。图形界面应用一般需要常驻后台，虽然优化得好的时候所占用的系统资源也可忽略不计，但是还是会有后台进程的。&lt;/p&gt;

&lt;p&gt;  尽管命令行工具极少会有显式的界面交互，但是也可以在终端提供非常丰富的命令行交互、功能解释、自动补全、自动建议等。用户使用起来一般没有太大问题，只需要调用子命令和参数即可实现操作。&lt;/p&gt;

&lt;h2 id=&quot;命令行工具开发&quot;&gt;命令行工具开发&lt;/h2&gt;

&lt;h3 id=&quot;设计标准和规范&quot;&gt;设计标准和规范&lt;/h3&gt;

&lt;p&gt;  命令行工具开发通常依据两个标准和规范进行：POSIX (Protable Operating System Interface，可移植操作系统接口) 标准和 GNU (GNU’s Not Unix) 项目。POSIX 标准是 IEEE 为维护操作系统间适配性而制定的一系列标准，其中一个标准定义了命令行程序的语法和语义。GNU 旨在创建与 Unix 兼容的自由软件，其中一个子项目 &lt;a href=&quot;https://www.gnu.org/software/coreutils/&quot;&gt;GNU Coreutils&lt;/a&gt; 提供了很多常用的命令行程序，比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cp&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mv&lt;/code&gt; 等。据此为命令行程序建立了以下的设计标准和规范：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;单字母标志 (single-letter flag) 以一个短横线 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-&lt;/code&gt; 开始，且可以合并使用：比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-d&lt;/code&gt; (全称 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--debug&lt;/code&gt;) 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt; (全称 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--version&lt;/code&gt;) 合并使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-dv&lt;/code&gt; 来以调试模式输出命令行版本号。&lt;/li&gt;
  &lt;li&gt;长标志 (long flag) 以两个短横线 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt; 开始，但无法合并使用：比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--debug&lt;/code&gt; 或 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--version&lt;/code&gt; 可以被命令行正常解析，但 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--debugversion&lt;/code&gt; 无法被正常解析。&lt;/li&gt;
  &lt;li&gt;选项 (Options) 跟在单字母标志后没有分隔符，但跟在长标志后使用等号 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;=&lt;/code&gt; 来分隔标志和选项值：比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-n example&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--name=example&lt;/code&gt; 分别为单字母标志和长标志的选项用法，二者完全等价。&lt;/li&gt;
  &lt;li&gt;参数 (Args) 跟在标志或选项之后时没有任何分隔符，仅有空格：比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl -o out.html https://www.google.com&lt;/code&gt; 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://www.google.com&lt;/code&gt; 是参数，一般用法类似 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl [Options] &amp;lt;Arg&amp;gt;&lt;/code&gt;。&lt;/li&gt;
  &lt;li&gt;子命令 (Sub command) 与主命令之间没有分隔符，仅有空格：比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt; 中 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt; 是主命令、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;commit&lt;/code&gt; 是子命令。&lt;/li&gt;
  &lt;li&gt;单独的两个短横线 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--&lt;/code&gt;（后不接标志）表示标志或选项的结束和参数的开始：比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rm -- -f&lt;/code&gt; 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt; 表示的是要删除的文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-f&lt;/code&gt;，而不是强制删除文件的选项。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 提示 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  按照以上设计标准和规范开发的命令行工具使用体验会与常用的命令保持一致，对于用户来说非常容易上手，这也是制定设计标准和规范的主要原因。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h3 id=&quot;功能设计&quot;&gt;功能设计&lt;/h3&gt;

&lt;p&gt;  核心功能设计主要是指命令行工具所支持的子命令、参数、选项设计。其中，子命令表示功能集合，参数表示输入输出变量，选项表示功能的微调。如下所示为笔者开发的命令行工具 &lt;a href=&quot;../../../tech/project/pictl.html&quot;&gt;pictl&lt;/a&gt; （基于 Python 语言开发）的帮助信息。目前提供四个子命令：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;config&lt;/code&gt;（配置基本信息），&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;compress&lt;/code&gt;（压缩任意图片为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;webp&lt;/code&gt; 格式）,&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;upload&lt;/code&gt;（上传图片）和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cup&lt;/code&gt;（压缩并上传图片）。全局只支持 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-h&lt;/code&gt;（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--help&lt;/code&gt;）打印帮助信息和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-V&lt;/code&gt;（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--version&lt;/code&gt;）打印版本信息两个选项。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl
Usage: pictl &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTIONS] COMMAND &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ARGS]...

  A &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;line tool &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;image processing and uploading &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ex. S3-type&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

  Now it supports:
    - transformation from other image types to &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;webp&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; image as well as
      image compression.
    - image file uploading to AWS S3 or Cloudflare R2.

Options:
  &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;  Show the pictl version.
  &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;     Show this message and exit.

Commands:
  compress  Compress any image into &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;webp&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; image.
  config    Operations &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the config file &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;~/.pictlrc&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
  cup       Compress image and upload to remote storage &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;compress and...
  upload    Upload the file to remote storage.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;子命令&quot;&gt;子命令&lt;/h4&gt;

&lt;p&gt;  &lt;strong&gt;子命令是否越少越好或者越多越好？亦或是不多不少比较好？&lt;/strong&gt;其实，根据实际功能需求的不同子命令的数量会有很大的差异。比如上面提到的 pictl 目前所支持的子命令只有 4 个，curl 不支持子命令但支持选项超过 20 个，git 支持的常用子命令多达 22 个（如下所示，实际子命令可能接近 100 个），docker 支持的子命令超过 30 个。子命令实际上是可以多层迭代调用的，即可以存在多层级。但是在功能设计时，一般将对同一对象操作的功能归类到同一子命令下面，形成多层级子命令。当然为了简化子命令的层级调用，最多的实践方式就是类似于 git 中的&lt;strong&gt;用选项来代替多层的子命令&lt;/strong&gt;。比如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch&lt;/code&gt; 子命令是对分支（branch）的列举（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch -l&lt;/code&gt;）、创建（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch &amp;lt;name&amp;gt;&lt;/code&gt;）和删除（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git branch -d &amp;lt;name&amp;gt;&lt;/code&gt;）的功能集合。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
usage: git &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; | &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; | &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; &amp;lt;path&amp;gt;] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &amp;lt;name&amp;gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;value&amp;gt;]
           &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--exec-path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[=&lt;/span&gt;&amp;lt;path&amp;gt;]] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--html-path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--man-path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--info-path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; | &lt;span class=&quot;nt&quot;&gt;--paginate&lt;/span&gt; | &lt;span class=&quot;nt&quot;&gt;-P&lt;/span&gt; | &lt;span class=&quot;nt&quot;&gt;--no-pager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--no-replace-objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--bare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--git-dir&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;path&amp;gt;] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--work-tree&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;path&amp;gt;] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--namespace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;name&amp;gt;]
           &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--super-prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;path&amp;gt;] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;--config-env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;name&amp;gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;envvar&amp;gt;]
           &amp;lt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;args&amp;gt;]

These are common Git commands used &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;various situations:

start a working area &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;see also: git &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;tutorial&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   clone     Clone a repository into a new directory
   init      Create an empty Git repository or reinitialize an existing one

work on the current change &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;see also: git &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;everyday&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   add       Add file contents to the index
   &lt;span class=&quot;nb&quot;&gt;mv        &lt;/span&gt;Move or rename a file, a directory, or a symlink
   restore   Restore working tree files
   &lt;span class=&quot;nb&quot;&gt;rm        &lt;/span&gt;Remove files from the working tree and from the index

examine the &lt;span class=&quot;nb&quot;&gt;history &lt;/span&gt;and state &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;see also: git &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;revisions&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   bisect    Use binary search to find the commit that introduced a bug
   diff      Show changes between commits, commit and working tree, etc
   &lt;span class=&quot;nb&quot;&gt;grep      &lt;/span&gt;Print lines matching a pattern
   log       Show commit logs
   show      Show various types of objects
   status    Show the working tree status

grow, mark and tweak your common &lt;span class=&quot;nb&quot;&gt;history
   &lt;/span&gt;branch    List, create, or delete branches
   commit    Record changes to the repository
   merge     Join two or more development histories together
   rebase    Reapply commits on top of another base tip
   reset     Reset current HEAD to the specified state
   switch    Switch branches
   tag       Create, list, delete or verify a tag object signed with GPG

collaborate &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;see also: git &lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;workflows&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
   fetch     Download objects and refs from another repository
   pull      Fetch from and integrate with another repository or a &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;branch
   push      Update remote refs along with associated objects

&lt;span class=&quot;s1&quot;&gt;&apos;git help -a&apos;&lt;/span&gt; and &lt;span class=&quot;s1&quot;&gt;&apos;git help -g&apos;&lt;/span&gt; list available subcommands and some
concept guides. See &lt;span class=&quot;s1&quot;&gt;&apos;git help &amp;lt;command&amp;gt;&apos;&lt;/span&gt; or &lt;span class=&quot;s1&quot;&gt;&apos;git help &amp;lt;concept&amp;gt;&apos;&lt;/span&gt;
to &lt;span class=&quot;nb&quot;&gt;read &lt;/span&gt;about a specific subcommand or concept.
See &lt;span class=&quot;s1&quot;&gt;&apos;git help git&apos;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;an overview of the system.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  功能设计中对子命令的设计是由核心功能驱动的。在条件允许的情况下，尽可能压缩子命令列表是有利于用户上手使用的。为了命令行工具使用时命令不会过长，建议提供比较常用的默认选项值从而减少用户自定义的可能性。当然，对全部选项的单字母标志支持也是有效缩短命令长度的方法之一。除此之外，提供配置文件也是非常可取的方法。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;curl&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wget&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker&lt;/code&gt; 等都提供对应的配置文件 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.gitconfig&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.curlrc&lt;/code&gt;、&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.wgetrc&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.dockerrc&lt;/code&gt; 进行全局配置定义，当然 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pictl&lt;/code&gt; 也提供 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.pictlrc&lt;/code&gt; 配置文件。&lt;/p&gt;

&lt;h4 id=&quot;代码架构&quot;&gt;代码架构&lt;/h4&gt;

&lt;p&gt;  尽管不同编程语言因为自身原因（编译型或解析型语言，面向对象或面向过程等），可能会有不同的代码架构偏好，我们可能依然可以采用一个宽泛且可行的通用代码架构思路——&lt;strong&gt;面向功能开发&lt;/strong&gt;。这里的功能可以是一个操作或者一个对象，比如说压缩图片这样一个功能，主要是将输入图片转换成想要的图片格式输出。除此之外，可能还可以提供压缩质量控制、尺寸控制、自动重命名、自动加水印等微调功能。这些微调功能虽然实际上可以完全独立，但由于是压缩图片功能的附属功能，最好采用选项调用的方式来实现。代码架构上，子命令调用对应的函数会成为&lt;strong&gt;顶级函数&lt;/strong&gt;。其他微调功能虽然是独立函数或对象，&lt;u&gt;但仅在子命令函数中被调用&lt;/u&gt;。实际开发过程中，微调功能并非一开始就包括所有，大部分会作为一些特性逐步增加到主代码中。这意味着，对用户来说新增一个微调功能仅仅多了一个子命令下的选项支持，不需要重新学习和适应。&lt;/p&gt;

&lt;p&gt;  如果压缩图片功能的基础（图片转换）需要自行编写代码，那么可能需要考虑到很多种图片格式的相互转换，这在具体代码实践中是非常麻烦的。比较可行的方法之一是，可以采用一种图片格式作为中间标准格式，每次新增一种图片格式的支持只需要增加与中间标准格式的相互转换即可。当然这里采用的中间标准格式可能是需要高保真的（或者高分辨率的），避免在用了中间标准格式转换之后图片质量自动下降。&lt;/p&gt;

&lt;h3 id=&quot;错误处理和自动建议&quot;&gt;错误处理和自动建议&lt;/h3&gt;

&lt;p&gt;  当我们打算开发一款命令行工具时，除了核心功能是必不可少的，错误处理和自动建议也是需要考虑在内的。了解这点最简单的办法就是从实例中学习。如下所示，是将 git 提交修改（commit）的命令 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt; 故意打成为 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commi&lt;/code&gt; 的输出结果。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commi
git: &lt;span class=&quot;s1&quot;&gt;&apos;commi&apos;&lt;/span&gt; is not a git command. See &lt;span class=&quot;s1&quot;&gt;&apos;git --help&apos;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

The most similar commands are
 commit
 column
 config
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  当命令行工具接收到用户输入时，首先需要做的就是对输入的合法性进行验证：一方面，是否存在不可用的子命令或非法使用（比如错误迭代调用）；另一方面，尝试解析参数并验证完整性。这两部分的验证会尽可能地将错误的原因和可能有用的建议提示给用户。类似上面，命令行工具会提示用户使用的子命令不存在，请使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git --help&lt;/code&gt; 了解更多。另外，会将输入的子命令字符串与所有合法的子命令字符串进行对比，根据相似性大小排列向用户自动建议。至于对选项的解析相对来说可以比较宽容一点，即直接忽略不合法的选项声明、仅读取合法的选项声明，因此可以不返回相关错误提醒及帮助。&lt;/p&gt;

&lt;p&gt;  当子命令、参数、选项均通过验证之后，命令行工具的功能代码执行时也会发生错误。如下所示，在一个非 git 项目文件夹内执行 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git commit&lt;/code&gt; 时，命令行工具会将具体的错误直接提示：当前目录或任何父目录不是一个 git 项目，不存在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt; 文件夹。这里需要注意的是，通常我们可能对错误或异常的处理会直接使用编程语言本身提供的方式，比如 Python 语言中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raise ValueError(&quot;&apos;element&apos; parameter is not defined.&quot;)&lt;/code&gt;。当然这种错误处理本身没有任何问题，只不过同时还会输出错误发生的代码位置等其他与用户使用无关的信息，尽管这种信息在开发过程中有利于开发者调试代码。出于为用户考虑，错误处理信息默认应该以简单可读的方式打印出来、且仅限于提示关键信息。如果用户或者开发者想要了解更多，可以通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt; 或者 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--verbose&lt;/code&gt; 选项来打印更多调试信息。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit
fatal: not a git repository &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;or any of the parent directories&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: .git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; -v 和 -V &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  通常来说，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-v&lt;/code&gt;（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--verbose&lt;/code&gt;）和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-V&lt;/code&gt;（&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--version&lt;/code&gt;）会被认为是不同的选项，分别用于开启调试模式和打印版本信息。当用户发现命令行工具使用出现不可预知的问题（错误提示与实际原因不符或其他不在开发者知晓范围内的问题）时，需要开启调试模式来排除本地环境的问题，同时也可能在向开发者反馈问题时提供足够的信息来帮助定位问题的原因。版本信息通常也是提交反馈问题时所需的必要信息。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h3 id=&quot;技术选型&quot;&gt;技术选型&lt;/h3&gt;

&lt;p&gt;  技术选型指的是&lt;strong&gt;用哪种编程语言以及哪种框架来实现命令行工具&lt;/strong&gt;。&lt;strong&gt;第一种&lt;/strong&gt;是从开发者自身熟悉和掌握的编程语言出发，尽可能降低编程语言上的学习成本。不过对于已经掌握一门或多门编程语言的开发者来说，学习新编程语言可能也不是件难事。&lt;strong&gt;第二种&lt;/strong&gt;是从应用场景出发：如果是开发为机器学习应用的前置或后置步骤的数据准备、数据处理、可视化等功能的命令行工具，采用 Python 语言可能会更加方便有效；如果是开发包含与操作系统交互的网络分析、磁盘分析等功能的命令行工具，采用 Rust 或者 Golang 语言可能会比较得心应手；如果是开发与平台接口交互（如 Web API 调用）的命令行工具，采用 NodeJS 语言可能适配性更佳。详细请查看参考资料 [1-5]。&lt;/p&gt;

&lt;h2 id=&quot;结语&quot;&gt;结语&lt;/h2&gt;

&lt;p&gt;  诚然，命令行工具并非是所有用户的喜爱，但的确是最小化操作步骤、提升效率的方式之一。以上所述的命令行工具开发指南入门篇大部分是在理论层面上的，至于在不同编程语言上的实践后续也计划展开：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;《命令行工具开发指南 —— Python 实践篇》&lt;/li&gt;
  &lt;li&gt;《命令行工具开发指南 —— Rust 实践篇》&lt;/li&gt;
  &lt;li&gt;《命令行工具开发指南 —— Golang 实践篇》&lt;/li&gt;
  &lt;li&gt;《命令行工具开发指南 —— NodeJS 实践篇》&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  有关于命令行工具开发进阶的依赖管理、编译构建、信号和日志处理、用户输入验证、自动补全（Auto Completion）、文档、测试和发布等也将在实践篇中分别具体阐述。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;https://juejin.cn/post/7178666619135066170&quot;&gt;快手数平前端团队 – 掌握 Node CLI 工具开发，为团队研发提效！&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.ruanyifeng.com/blog/2015/05/command-line-with-node.html&quot;&gt;阮一峰的网络日志 – Node.js 命令行程序开发教程&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://suibianxiedianer.github.io/rust-cli-book-zh_CN/README_zh.html&quot;&gt;Rust 中的命令行应用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://pythonguidecn.readthedocs.io/zh/latest/scenarios/cli.html&quot;&gt;命令行应用 - Python 最佳实践指南&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://tonybai.com/2023/03/25/the-guide-of-developing-cli-program-in-go/&quot;&gt;Tony Bai – Go 开发命令行程序指南&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/POSIX&quot;&gt;Wikipedia – POSIX&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Wed, 29 May 2024 17:15:00 +0900</pubDate>
        <link>https://lisz.me/tech/cli/introduction.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/cli/introduction.html</guid>
        
        <category>command line</category>
        
        <category>命令行</category>
        
        <category>develop</category>
        
        <category>开发</category>
        
        <category>tool</category>
        
        <category>工具</category>
        
        
        <category>tech</category>
        
        <category>cli</category>
        
      </item>
    
      <item>
        <title>图片处理及上传命令行工具 —— PICTL</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  自从博客从 WordPress 转到静态博客（先 Hexo 后 Jekyll）之后，文章的图片处理、图片上传就成了一个不大顺畅的事情。最先是使用了 &lt;a href=&quot;https://vgy.me&quot;&gt;vgy.me&lt;/a&gt; 提供的免费图床，支持直接从剪切板上传，操作上相对比较简单，也不需要任何本地存储。不过后来 vgy.me 进行了升级改版，原先的剪切板上传功能也不再支持了，偶尔还出现图片像素被降低、丢失的问题。同时，考虑到 WebP 格式可能会适合博客使用，而 vgy.me 还不支持该格式。于是开始切换到 “对象存储 + CDN” 的方案。本地准备好的 PNG 格式图片，先通过 &lt;a href=&quot;https://developers.google.com/speed/webp/&quot;&gt;cwebp&lt;/a&gt; 命令行转成 WebP 格式图片，再通过 &lt;a href=&quot;https://github.com/gee1k/uPic&quot;&gt;uPic&lt;/a&gt; 工具修改文件名后上传到对象存储。由于此前采用的是腾讯云的 COS 对象存储和 CDN，经常面临着 SSL 证书更新等琐碎的事情。这样一来，整体的效率实际上并不高，只能说勉强接受。&lt;/p&gt;

&lt;h3 id=&quot;现有工具及存储考察&quot;&gt;现有工具及存储考察&lt;/h3&gt;

&lt;p&gt;  为此，也对其他工具和对象存储进行了考察。&lt;/p&gt;

&lt;p&gt;  &lt;a href=&quot;https://github.com/Molunerfinn/PicGo&quot;&gt;PicGo&lt;/a&gt; 是一款集客户端 UI 和命令行于一体的图片上传工具，虽然可以利用命令串联的方式简单将图片格式转换和上传两步变成一步，但还是有那么点不舒服的地方，比如 PicGo 不提供文件名修改（为固定长度随机字符串）的特性。而 uPic 本身关注于客户端桌面交互，不提供命令行接口。&lt;/p&gt;

&lt;p&gt;  至于对象存储，国内各家云服务厂商提供的都需要自行手动更新 SSL 证书，且收费。尽管腾讯云 CDN 目前老用户可以每月领券免费使用，但一旦忘记就开始被收费了。实际上也有逐步转向收费的趋势。国外各家云服务厂商基本上都需要收费使用对象存储或者 CDN，大差不差。&lt;/p&gt;

&lt;p&gt;  当然，网上一直有一种 “Backblaze B2 + Cloudflare” 的解决方案。由于 B2 本身存储和读写操作都有免费额度，流量需要收费，且无法自定义域名，而 B2 和 Cloudflare 同属于宽带联盟（内部流量免费），Cloudflare 还提供 URL 重写功能，这种解决方案一时成为了潮流。不过，B2 的访问链接是中间带着一串参数，重写之后仍然还是有部分参数，最终的 URL 并不是那么朴素。总的来说，还是有那么点别扭。&lt;/p&gt;

&lt;h3 id=&quot;r2-的出现&quot;&gt;R2 的出现&lt;/h3&gt;

&lt;p&gt;  因此观望了许久，直到 Cloudflare 推出了 R2。R2 是一款对标 AWS S3 的产品，基于 Cloudflare 对宽带联盟的承诺而构建，为存储对象提供零成本出口，实际上就是免费 CDN。由于 Cloudflare 本身就是一家 CDN 服务商，自定义对象存储访问域名、自动生成部署 SSL 证书这些事情就变得轻而易举了。R2 提供 10GB 的免费存储，读操作每月免费 1000 万次，写、更新和删除操作每月免费 100 万次。这对于一般的静态博客来说，应该完全足够了，即使超出了免费额度，超出部分收费也相较其他云服务厂商便宜一些。&lt;/p&gt;

&lt;p&gt;  对笔者而言，R2 产品将对象存储和 CDN 两款产品有机地结合起来，解决了静态博客图片对外访问前的“最后一公里”。于是想从 COS 迁移到 R2，无奈 uPic 这个时候卖了个“破绽”。uPic 似乎在开始转向商业收费，Github 上不再发布新版本，而仅在 Appstore 上继续更新对 R2 的支持。当然，Appstore 上的 uPic 是收费的（4.99 美元，其实也不贵）。&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小提示 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  R2 虽然说是对标 AWS S3，但是并没有完整实现所有 API 接口，所以目前 Github 上发布的 uPic 版本无法兼容。尽管可以自行通过修改 uPic 的开源代码来实现兼容，但毕竟修改别人的代码的成本还是有一点高的。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h2 id=&quot;开个新项目&quot;&gt;开个新项目&lt;/h2&gt;

&lt;p&gt;  在充分梳理个人使用需求之后，还是决定开个新项目——开发一款简单易用的命令行工具 PICTL（全称 &lt;strong&gt;Pi&lt;/strong&gt;cture &lt;strong&gt;C&lt;/strong&gt;on&lt;strong&gt;t&lt;/strong&gt;ro&lt;strong&gt;l&lt;/strong&gt;）。该工具须具备以下特性：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;考虑图片的存储空间大小和网页加载时长，所有图片应被压缩并转成 WebP 格式；&lt;/li&gt;
  &lt;li&gt;所有图片的名称应被修改成一个固定长度随机字符串，并支持上传到类 S3 的对象存储；&lt;/li&gt;
  &lt;li&gt;简单易用，命令行优先，无网页或桌面交互界面；&lt;/li&gt;
  &lt;li&gt;（可选）自动添加水印；&lt;/li&gt;
  &lt;li&gt;（可选）根据设定自动调整图片尺寸；&lt;/li&gt;
  &lt;li&gt;（可选）可以直接从剪切板读取图片。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;架构设计&quot;&gt;架构设计&lt;/h2&gt;

&lt;p&gt;  根据所列出的特性，这款命令行工具主要的模块就是：&lt;strong&gt;图片处理模块&lt;/strong&gt;和&lt;strong&gt;上传模块&lt;/strong&gt;，架构如下图所示。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/Gl8qhI.webp&quot; alt=&quot;PICTL 架构图 The architecture of PICTL&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  图片处理模块包括图片压缩、图片格式转换、图片水印、尺寸调整等功能，可以进行无缝横向扩展。上传模块主要包括对于三种存储方式的支持：&lt;strong&gt;第一类&lt;/strong&gt;是最为广泛的类 S3 对象存储，如 R2、AWS S3 及国内外云服务厂商各种对象存储等，&lt;strong&gt;第二类&lt;/strong&gt;是目前仍然在博客中广泛流行的第三方图床，如 &lt;a href=&quot;https://sm.ms&quot;&gt;SM.MS&lt;/a&gt;、&lt;a href=&quot;https://vgy.me&quot;&gt;vgy.me&lt;/a&gt;、&lt;a href=&quot;https://github.com/chevereto/chevereto&quot;&gt;chevereto&lt;/a&gt; 类型图床等，&lt;strong&gt;第三类&lt;/strong&gt;是自托管 Git 平台和 FTP 平台。&lt;/p&gt;

&lt;div class=&quot;premonition warning&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon warning&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-warning&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 特此声明 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  鉴于 Github、Gitlab、Gitee 等公共代码托管平台均禁止把 Git 仓库作为图床的做法，本工具仅支持自建 Git 平台，如自建 Gitlab 和 Gitlab Pages。如试图上传到公共代码托管平台，本工具会自行中断上传。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;p&gt;  本工具由于仅支持命令行，所以计划用 Python 和 &lt;a href=&quot;https://click.palletsprojects.com/&quot;&gt;Click&lt;/a&gt; 进行开发。虽然借助 &lt;a href=&quot;https://google.github.io/python-fire/&quot;&gt;Google Fire&lt;/a&gt; 也可以快速开发命令行工具，但其使用方式上与原生 *nix 的命令行工具有所不同。相比之下，用 Click 开发可能会麻烦一点，但能够开发出更类原生的 Python 命令行工具。当然，目前开发上还是比较喜欢使用 Rust 或者 Go 语言来开发高性能的命令行工具。不过，本工具只是做一些非常简单的工作，没有性能上的瓶颈，用 Python 开发也足够了。&lt;/p&gt;

&lt;h2 id=&quot;开发计划&quot;&gt;开发计划&lt;/h2&gt;

&lt;p&gt;  请移步 &lt;a href=&quot;https://github.com/users/zhonger/projects/5&quot;&gt;Github Project&lt;/a&gt; 了解更多。&lt;/p&gt;

&lt;h2 id=&quot;使用方法&quot;&gt;使用方法&lt;/h2&gt;

&lt;p&gt;  目前，PICTL 已经在 &lt;a href=&quot;https://github.com/zhonger/pictl/releases&quot;&gt;Github&lt;/a&gt; 和 &lt;a href=&quot;https://pypi.org/project/pictl/&quot;&gt;PyPI&lt;/a&gt; 同步发布了 v0.1.0 版本。该版本实现了以上架构图中的基本功能，即特性中的前三点必要项。接下来介绍一下如何安装和使用本工具。&lt;/p&gt;

&lt;h3 id=&quot;安装&quot;&gt;安装&lt;/h3&gt;

&lt;p&gt;  目前支持两种安装方式：&lt;strong&gt;源码安装&lt;/strong&gt;和 &lt;strong&gt;PIP 安装&lt;/strong&gt;，后续将增加对于 brew 的支持。&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小提示 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  安装前，请务必确保已满足 Python 版本高于 3.10 的条件。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h4 id=&quot;源码安装&quot;&gt;源码安装&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/zhonger/pictl
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;pictl
pip3 &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;pip-安装&quot;&gt;PIP 安装&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip3 &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;pictl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;

&lt;h4 id=&quot;显示版本&quot;&gt;显示版本&lt;/h4&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
PICTL 0.1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;列举所有支持命令&quot;&gt;列举所有支持命令&lt;/h4&gt;

&lt;p&gt;  目前 v0.1.0 版本包含四个子命令：config（配置管理），compress（图片处理），upload（上传文件）和 cup（一键式压缩、转换、上传）。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl
Usage: pictl &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTIONS] COMMAND &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ARGS]...

  A &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;line tool &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;image processing and uploading &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ex. S3-type&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

  Now it supports:
    - transformation from other image types to &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;webp&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; image as well as
      image compression.
    - image file uploading to AWS S3 or Cloudflare R2.

Options:
  &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--version&lt;/span&gt;  Show the pictl version.
  &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;     Show this message and exit.

Commands:
  compress  Compress any image into &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;webp&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; image.
  config    Operations &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the config file &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;~/.pictlrc&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
  cup       Compress image and upload to remote storage &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;compress and...
  upload    Upload the file to remote storage
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;config-子命令&quot;&gt;config 子命令&lt;/h4&gt;

&lt;p&gt;  config 子命令包含 add（添加配置）、delete（删除配置）、info（查看所有配置）和 init（初始化配置）四种操作。使用本工具需要先执行初始行配置操作，再执行其他配置操作。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl config
Usage: pictl config &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTIONS] COMMAND &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;ARGS]...

  Operations &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;the config file &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;~/.pictlrc&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

Options:
  &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;  Show this message and exit.

Commands:
  add     Add configs to the config file.
  delete  Delete config group from the config file.
  info    Check the configs.
  init    Initialize config file with default configs.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  如下所示，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pictl config init&lt;/code&gt; 命令初始化配置。第二次执行时，由于已存在配置文件，会提示已经初始化过了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl config init
The settings has been initilized &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /home/ubuntu/.pictlrc.

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl config init
/home/ubuntu/.pictlrc already exists.
Please add settings or change it manaully.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pictl config info&lt;/code&gt; 以 JSON 格式打印所有配置信息。配置文件默认采用 TOML 格式。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl config info
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&apos;basic&apos;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;length&apos;&lt;/span&gt;: 6, &lt;span class=&quot;s1&quot;&gt;&apos;ntype&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;random&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;algorithm&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;sha1&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/.pictlrc
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;basic]
length &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 6
ntype &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;random&quot;&lt;/span&gt;
algorithm &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;sha1&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pictl config add&lt;/code&gt; 以命令行交互方式添加配置（以下是 R2 的例子）。添加完成后可以再次查看新增后的所有配置。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl config add
&lt;span class=&quot;k&quot;&gt;******&lt;/span&gt; Please input these information &lt;span class=&quot;k&quot;&gt;******&lt;/span&gt;
Group Name &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default &lt;span class=&quot;s1&quot;&gt;&apos;blog&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;?] Type: : R2
   S3
 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; R2

Account ID: testid
Bucket Name: &lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;Key: testkey
Secret: testsecret
Prefix &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Default is None&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;:
Access Url &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;like &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;https://i.example.com&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: https://i.example.com
New group &lt;span class=&quot;s1&quot;&gt;&apos;test&apos;&lt;/span&gt; has been saved &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; /Users/zhonger/.pictlrc.

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl config info
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&apos;basic&apos;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&apos;length&apos;&lt;/span&gt;: 6, &lt;span class=&quot;s1&quot;&gt;&apos;ntype&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;random&apos;&lt;/span&gt;, &lt;span class=&quot;s1&quot;&gt;&apos;algorithm&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;sha1&apos;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
    &lt;span class=&quot;s1&quot;&gt;&apos;test&apos;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&apos;endpoint&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;https://testid.r2.cloudflarestorage.com/test&apos;&lt;/span&gt;,
        &lt;span class=&quot;s1&quot;&gt;&apos;bucket&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;test&apos;&lt;/span&gt;,
        &lt;span class=&quot;s1&quot;&gt;&apos;prefix&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;&apos;&lt;/span&gt;,
        &lt;span class=&quot;s1&quot;&gt;&apos;key&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;testkey&apos;&lt;/span&gt;,
        &lt;span class=&quot;s1&quot;&gt;&apos;secret&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;testsecret&apos;&lt;/span&gt;,
        &lt;span class=&quot;s1&quot;&gt;&apos;url&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;https://i.example.com&apos;&lt;/span&gt;,
        &lt;span class=&quot;s1&quot;&gt;&apos;type&apos;&lt;/span&gt;: &lt;span class=&quot;s1&quot;&gt;&apos;R2&apos;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pictl config delete&lt;/code&gt; 命令可以选择删除远程配置组（此处为了展示，除 test 外还添加了其他配置组）。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl config delete
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;?] Please &lt;span class=&quot;k&quot;&gt;select &lt;/span&gt;one group: : &lt;span class=&quot;nb&quot;&gt;test
   &lt;/span&gt;blog
   cover
 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test

test &lt;/span&gt;has been deleted.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;compress-子命令&quot;&gt;compress 子命令&lt;/h4&gt;

&lt;p&gt;  本子命令输入参数为&lt;strong&gt;图片文件名&lt;/strong&gt;，可以带路径。输出图片会被保存在命令执行位置，&lt;strong&gt;而非原图片所在目录&lt;/strong&gt;。执行该操作后，图片还不会被上传，需要继续使用 upload 命令完成上传。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl compress &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
Usage: pictl compress &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTIONS] FILENAME

  Compress any image into &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;webp&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; image.

  FILENAME is the name of the file to compress.

Options:
  &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;  Show this message and exit.

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl compress ../../pictl/fig01.png
The output file is EVyP2J.webp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;upload-子命令&quot;&gt;upload 子命令&lt;/h4&gt;

&lt;p&gt;  如下所示，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pictl upload&lt;/code&gt; 命令加上指定上传文件名和远程配置组即可完成上传。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl upload &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
Usage: pictl upload &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTIONS] FILENAME GROUP

  Upload the file to remote storage.

  FILENAME is the name of the file to upload.
  GROUP is the group &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the config file you want to use.

Options:
  &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;  Show this message and exit.

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl upload EVyP2J.webp &lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;Direct URL: https://i.example.com/EVyP2J.webp
Markdown: &lt;span class=&quot;o&quot;&gt;![&lt;/span&gt;EVyP2J.webp]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;https://i.example.com/EVyP2J.webp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
HTML Code: &amp;lt;img &lt;span class=&quot;nv&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://i.example.com/EVyP2J.webp&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;EVyP2J.webp&quot;&lt;/span&gt; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;cup-子命令&quot;&gt;cup 子命令&lt;/h4&gt;

&lt;p&gt;  cup 子命令 = compress 子命令 + upload 子命令，仅需要指定初始图片文件和远程配置组，即可一步完成图片压缩、格式转换、修改名称、上传。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl cup &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;
Usage: pictl cup &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTIONS] FILENAME GROUP

  Compress image and upload to remote storage &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;compress and upload&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

  FILENAME is the name of the file to compress.
  GROUP is the group &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the config file you want to use.

Options:
  &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;, &lt;span class=&quot;nt&quot;&gt;--help&lt;/span&gt;  Show this message and exit.

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pictl cup ../../pictl/fig01.png &lt;span class=&quot;nb&quot;&gt;test
&lt;/span&gt;The output file is Gl8qhI.webp
Direct URL: https://i.example.com/Gl8qhI.webp
Markdown: &lt;span class=&quot;o&quot;&gt;![&lt;/span&gt;Gl8qhI.webp]&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;https://i.example.com/Gl8qhI.webp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
HTML Code: &amp;lt;img &lt;span class=&quot;nv&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://i.example.com/Gl8qhI.webp&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;alt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Gl8qhI.webp&quot;&lt;/span&gt; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;todo&quot;&gt;TODO&lt;/h2&gt;

&lt;p&gt;  目前的 v0.1.0 版本还比较简陋，不过已经能满足笔者的必要需求，有效提升效率。后续将继续完善、新增功能：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自动补全（shell completion），增强命令行使用体验。&lt;/li&gt;
  &lt;li&gt;增加对各云服务厂商提供对象存储的支持。&lt;/li&gt;
  &lt;li&gt;增加对各流行图床的支持。&lt;/li&gt;
  &lt;li&gt;增加对自托管 Git 的支持。&lt;/li&gt;
  &lt;li&gt;增加对 FTP 的支持。&lt;/li&gt;
  &lt;li&gt;增加包括水印、调整大小等在内的图片处理的支持。&lt;/li&gt;
  &lt;li&gt;增加与 Unplash 等公共图库的连接，更加便于博客封面的操作。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://blog.cloudflare.com/introducing-r2-object-storage-zh-cn/&quot;&gt;隆重推出 Cloudflare R2 Storage —— 快速、可靠的对象存储，减免出口费用&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://developers.cloudflare.com/r2/&quot;&gt;R2 文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 13 Jun 2023 13:41:01 +0900</pubDate>
        <link>https://lisz.me/tech/project/pictl.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/project/pictl.html</guid>
        
        <category>pictl</category>
        
        <category>命令行</category>
        
        <category>工具</category>
        
        <category>cli</category>
        
        <category>tool</category>
        
        
        <category>tech</category>
        
        <category>project</category>
        
      </item>
    
      <item>
        <title>通用运行环境版本管理神器 ASDF</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  之前介绍了高性能集群中常用的运行环境和软件版本管理工具 Modules，今天打算介绍一款适合个人或团队开发使用的通用运行环境版本管理神器 &lt;a href=&quot;https://asdf-vm.com/zh-hans/&quot;&gt;ASDF&lt;/a&gt;。与高性能计算任务不同，个人或团队开发项目一般来说都是使用独立的设备或环境，然后通过代码版本跟踪 git 等来进行异步协作。所以说，在每个人的单个或多个设备上都安装配置 Modules 显得有点不太现实和高效。但是项目开发所需的代码环境确实有的时候可能比较复杂，比如说同时需要 Ruby、NodeJS、Java、Python 四种环境，而且可能对于每种环境还有版本的限制。这样一来，光配置这一堆环境就要花上大半天时间了。&lt;/p&gt;

&lt;h3 id=&quot;asdf-简介&quot;&gt;ASDF 简介&lt;/h3&gt;

&lt;p&gt;  ASDF 提供了全平台通用的环境配置方案，使用单个命令行工具和交互界面就可以管理超复杂的运行环境。以往针对不同运行环境，需要使用不同的配置文件来进行版本的声明。对于 ASDF，只需要一个可共享的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tool-versions&lt;/code&gt; 配置文件即可。ASDF 涵盖了包括 Ruby、NodeJS、Java、PHP、.Net 在内的几百种运行环境，具体可以查看 &lt;a href=&quot;https://github.com/asdf-vm/asdf-plugins&quot;&gt;ASDF 插件列表&lt;/a&gt; 了解更多。&lt;/p&gt;

&lt;p&gt;  另外，ASDF 完全支持包括 Bash、Zsh、Fish 和 Elvish 在内的常用 shell 类型，并提供补全功能。在类似 Github Actions 等的 CI/CD 工作流中，也可以轻松使用 ASDF。值得一提的是，笔者翻译了 ASDF 文档的中文版本并被官方采纳，现在 ASDF 官网支持英语、巴西语和中文三种语言。&lt;/p&gt;

&lt;h3 id=&quot;为何不选其他方案&quot;&gt;为何不选其他方案&lt;/h3&gt;

&lt;h4 id=&quot;docker&quot;&gt;Docker&lt;/h4&gt;

&lt;p&gt;  很显然，如果大家的设备上都有 Docker 环境且 CPU 架构相同的话，Docker 无疑是最省心的方案。Docker 镜像的确可以轻松涵盖所有开发环境和实际运行环境（Apache 等 HTTP 服务器、数据库以及其他）。相比笨重的 VMware 或 Virtualbox 虚拟机镜像而言，Docker 镜像也更加小巧、便捷。而且团队可以通过在内部搭建自己的 Docker 镜像仓库，来分享这些镜像给所有参与项目的开发者。唯一可能会有问题的是，设备 CPU 架构和操作系统的多样性可能会给实际操作带来了不小的问题。实际上可能会有 Windows 系统、Linux 系统、MacOS 系统以及 Intel 架构、AMD 架构、ARM 架构（如 M1、M2 等）。可行的解决方法是，尽可能地构建更多架构的镜像。&lt;/p&gt;

&lt;h4 id=&quot;anaconda&quot;&gt;Anaconda&lt;/h4&gt;

&lt;p&gt;  Anaconda 现在可能已经完全超出了一个 Python 环境管理工具，有的时候也可以当成通用软件或环境管理器来用。但是毕竟还是以科学计算为主要目的，如果项目仅仅是 Python、R 语言可能还是比较合适的，对于实际编程所需的其他运行环境来说可能还是支持不够的。&lt;/p&gt;

&lt;div class=&quot;premonition note&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon note&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-note&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小提示 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  据笔者所知，在 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;conda-forge&lt;/code&gt; 频道里的确有 PHP 等编程语言的支持。除此之外，也有一些热心开发者在个人频道提供了 java-jdk、golang 等编程环境支持。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h4 id=&quot;云开发&quot;&gt;云开发&lt;/h4&gt;

&lt;p&gt;  云开发主要是指基于云基础设施的在线代码开发环境，主要的代表有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://aws.amazon.com/cn/cloud9/&quot;&gt;Cloud9&lt;/a&gt;：笔者最早接触过的云开发，目前已被 AWS 收购，更名为 AWS Cloud9。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/features/codespaces&quot;&gt;Codespaces&lt;/a&gt;：由 Azure 提供云服务、Github 负责运营的一站式云开发环境。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.gitpod.io/&quot;&gt;Gitpod&lt;/a&gt;：基于 VS Code 研发的优秀云开发环境，早期以“便捷、快速”著称，较先于 Codespaces 出现。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/product/cloudstudio&quot;&gt;Cloud Studio&lt;/a&gt;：由腾讯云提供云服务、基于 VS Code 的国产云开发环境，能够很好地支持个人开发、招聘笔试、课堂教学、应用快捷部署等各种场景。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.huaweicloud.com/product/cloudide.html&quot;&gt;CodeArts IDE Online&lt;/a&gt;：由华为云提供云服务、基于 VS Code 的国产云开发环境。除了一般云开发所具备的特点，还支持华为鲲鹏原生环境，能够很好地满足跨架构应用开发的需求。&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cn.aliyun.com/product/yunxiao/devstudio&quot;&gt;DevStudio&lt;/a&gt;：由阿里云提供云服务、基于 VS Code 的国产云开发环境。支持应用开发全流程管理，与阿里云各项基础服务紧密结合，适合大规模团队使用。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了以上列举的云开发之外，也有一些比较传统的小型云开发实践，比如说知名的 &lt;a href=&quot;https://jsfiddle.net/&quot;&gt;JSFiddle&lt;/a&gt;、&lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;、&lt;a href=&quot;https://replit.com/&quot;&gt;Replit&lt;/a&gt; 等。虽然说这些云开发主要是适合较小代码库，但在实际学习过程中用处也是很大的。&lt;/p&gt;

&lt;p&gt;  云开发不仅兼顾了传统开发过程中的协同与流程，又将资源与环境整合在云里面，自然而然是最好的解决方案。随着 VS Code 在开发者之间的流行和云服务提供商的努力，基于 VS Code 的云开发环境层出不穷。即使云开发环境本身免费，云也还是要按量按时计费的。对于还没有足够支持上云的团队或个人来说，ASDF 依然是个不错的选择。&lt;/p&gt;

&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;h3 id=&quot;环境需求&quot;&gt;环境需求&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Linux/Unix 环境（Linux、MacOS、Windows WSL）&lt;/li&gt;
  &lt;li&gt;git&lt;/li&gt;
  &lt;li&gt;bash 等（此处以 zsh 为例）&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;环境配置&quot;&gt;环境配置&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 下载源码到 ~/.asdf 目录&lt;/span&gt;
git clone https://github.com/asdf-vm/asdf.git ~/.asdf &lt;span class=&quot;nt&quot;&gt;--branch&lt;/span&gt; v0.11.3

&lt;span class=&quot;c&quot;&gt;# 在 ~/.zshrc 文件中加入内容&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;tee&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-a&lt;/span&gt; ~/.zshrc &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
. &quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;/.asdf/asdf.sh&quot;
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 激活配置&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; ~/.zshrc

&lt;span class=&quot;c&quot;&gt;# 验证&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf version
v0.11.3-0adc6c1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;安装插件&quot;&gt;安装插件&lt;/h3&gt;

&lt;p&gt;  由于 ASDF 支持插件较多，这里以 Python 环境为例介绍 ASDF 安装插件。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 添加插件&lt;/span&gt;
asdf plugin add python

&lt;span class=&quot;c&quot;&gt;# 查看已安装插件&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf plugin list
python

&lt;span class=&quot;c&quot;&gt;# 查看最新 Python 版本&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf latest python
3.11.2

&lt;span class=&quot;c&quot;&gt;# ASDF 安装 Python 3.11.2 (latest)&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python latest
python-build 3.11.2 /home/ubuntu/.asdf/installs/python/3.11.2
Downloading Python-3.11.2.tar.xz...
-&amp;gt; https://www.python.org/ftp/python/3.11.2/Python-3.11.2.tar.xz
Installing Python-3.11.2...
Installed Python-3.11.2 to /home/ubuntu/.asdf/installs/python/3.11.2

&lt;span class=&quot;c&quot;&gt;# 查看已安装 Python 版本列表&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf list
python
  3.11.2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;

&lt;p&gt;  ASDF 提供全局版本（Global）和本地版本（Local）两种方式定义运行环境版本。全局版本是系统级别的，类似于 PATH 变量中定义的；本地版本则是为了某个代码库或者部分代码准备的，通常在目录中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.tool-versions&lt;/code&gt; 文件里定义。为了区分全局和本地的效果差别，这里再安装一个指定 Python 版本。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查询 Python 插件支持的所有版本&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf list all python
2.1.3
2.2.3
......
stackless-3.7.5

&lt;span class=&quot;c&quot;&gt;# 安装 Python 3.9.0&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;python 3.9.0
python-build 3.9.0 /home/zhonger/.asdf/installs/python/3.9.0
Downloading Python-3.9.0.tar.xz...
-&amp;gt; https://www.python.org/ftp/python/3.9.0/Python-3.9.0.tar.xz
Installing Python-3.9.0...
patching file Misc/NEWS.d/next/Build/2021-10-11-16-27-38.bpo-45405.iSfdW5.rst
patching file configure
patching file configure.ac
Installed Python-3.9.0 to /home/zhonger/.asdf/installs/python/3.9.0

&lt;span class=&quot;c&quot;&gt;# 查看已安装 Python 版本列表&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf list
python
  3.11.2
  3.9.0

&lt;span class=&quot;c&quot;&gt;# 查看当前系统 Python 及 Python3 版本&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
No python executable found &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;python system

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
Python 3.10.6

&lt;span class=&quot;c&quot;&gt;# 更改全局版本为 3.11.2 并查看&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf list
python
 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;3.11.2
  3.9.0

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
Python 3.11.2

&lt;span class=&quot;c&quot;&gt;# 创建子目录指定本地版本并查看&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;py &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;py
asdf &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;python 3.9.0

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
Python 3.9.0

&lt;span class=&quot;c&quot;&gt;# 返回父目录查看 Python 版本&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; .. &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; python &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
Python 3.11.2

&lt;span class=&quot;c&quot;&gt;# 查看当前系统 Python3 版本&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
Python 3.10.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小提示 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  这里有一点比较有趣的是：由于 ASDF 接管的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python&lt;/code&gt; 命令而非 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3&lt;/code&gt; 命令，所以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3&lt;/code&gt; 命令输出的版本依然还是系统安装版本。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h3 id=&quot;其他相关&quot;&gt;其他相关&lt;/h3&gt;

&lt;p&gt;  如果想要恢复到系统指定版本，可以很容易使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asdf global python system&lt;/code&gt; 命令。当然，对于本地版本，可以使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;asdf local python system&lt;/code&gt; 来实现。除此之外，还有一些常规操作如下。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查看 Python 指定版本安装位置&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf where python 3.11.2
/home/zhonger/.asdf/installs/python/3.11.2

&lt;span class=&quot;c&quot;&gt;# 查看命令所在位置&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf which python
/home/zhonger/.asdf/installs/python/3.11.2/bin/python

&lt;span class=&quot;c&quot;&gt;# 查看当前 ASDF 管理的运行环境&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;asdf current
python          3.11.2          /home/ubuntu/.tool-versions

&lt;span class=&quot;c&quot;&gt;# 查看全局和本地版本配置文件&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/.tool-versions
python 3.11.2

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; ~/py/.tool-versions
python 3.9.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://asdf-vm.com/zh-hans/guide/getting-started.html&quot;&gt;ASDF 官网 - 快速入门&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://asdf-vm.com/zh-hans/manage/versions.html&quot;&gt;ASDF 官网 - 版本&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 20 Mar 2023 15:50:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/asdf.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/asdf.html</guid>
        
        <category>Linux</category>
        
        <category>Environment</category>
        
        <category>Manage</category>
        
        <category>Dev Runtime</category>
        
        <category>软件环境</category>
        
        <category>多版本</category>
        
        <category>管理</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
      <item>
        <title>Modules 配置之 Python</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  近年来得益于其轻量、易学易用、第三方支持依赖库多的特点，Python 语言大量被用于机器学习相关的研究、项目开发。在学术界，有以 &lt;a href=&quot;https://scikit-learn.org&quot;&gt;Scikit-Learn&lt;/a&gt; 为代表的全能机器学习库；在产业界，有以 &lt;a href=&quot;https://www.tensorflow.org&quot;&gt;TensorFlow&lt;/a&gt;、&lt;a href=&quot;https://pytorch.org&quot;&gt;PyTorch&lt;/a&gt; 为代表的生产级机器学习模型计算框架。（当然，学术界实际上构建大规模深度学习模型时也会用到 PyTorch 等计算框架。）但对于大多数人来说，学习这些库、框架或者借助它们从事某些研究、项目开发时，可能还是在用自己的笔记本、台式机。哪怕是在高校的实验室里，这种事情也是屡见不鲜。因此，有交互界面、相对容易上手的 &lt;a href=&quot;https://www.anaconda.com&quot;&gt;Anaconda&lt;/a&gt; 可能会作为大家管理 Python 环境的首选。&lt;/p&gt;

&lt;p&gt;  当我们在用 Python 编写一些代码，而代码一次运行不可能在短短几秒、几分钟内得到结果时，将任务提交给高性能工作站或者集群作业系统就显得格外有效。尤其是当应用规模较大、计算迭代次数较多时，非交互式的作业提交方式会变得更加有利。毕竟如果是用自己的笔记本运行着这么大的计算，资源基本上都被计算占用了，根本没办法用笔记本去干点别的事情。甚至说，计算还会使得 CPU 等核心部件温度上升，从而影响计算性能。这样比较下来，不得不说提交任务给高性能工作站或者集群作业系统是多么明智的选择。&lt;/p&gt;

&lt;p&gt;  其实，Anaconda 在没有交互界面的服务器操作系统上也还是可以使用的，我们可以使用其免费的精简版 —— &lt;a href=&quot;https://conda.io/miniconda&quot;&gt;miniconda&lt;/a&gt;。虽然 miniconda 已经是精简版了，但和原生 Python 环境比起来还是要多不少东西的。从高性能计算环境的角度来看，使用 Modules 直接管理 Python 环境实际上更加贴近原生，也更加有利于用户与其他环境搭配使用。比如说安装  Python 的 MPI 支持库 —— MPI4PY，仅需要通过 Modules 管理工具加载 Python 和 MPI 两个基础环境，使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip3 install mpi4py&lt;/code&gt; 命令即可安装。&lt;/p&gt;

&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;p&gt;  将 Python 环境纳入 Modules 管理的步骤就是两步：第一步，编译源代码及安装；第二步，添加 Modules 配置文件。当然，最开始还是需要确认一下编译环境是否完备以及文件夹是否准备好。&lt;/p&gt;

&lt;h3 id=&quot;环境及文件夹准备&quot;&gt;环境及文件夹准备&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 安装编译环境&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; build-essential libbz2-dev libdb-dev &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  libreadline-dev libffi-dev libgdbm-dev liblzma-dev &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  libncursesw5-dev libsqlite3-dev libssl-dev &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  zlib1g-dev uuid-dev tk-dev wget
  
&lt;span class=&quot;c&quot;&gt;# 准备文件夹&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /opt/python/3.10.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;编译及安装&quot;&gt;编译及安装&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 下载源代码&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /tmp
wget &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; https://www.python.org/ftp/python/3.10.6/Python-3.10.6.tar.xz

&lt;span class=&quot;c&quot;&gt;# 解压源代码&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xf Python-3.10.6.tar.xz

&lt;span class=&quot;c&quot;&gt;# 配置安装路径及编译选项&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;Python-3.10.6
./configure &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/python/3.10.6 &lt;span class=&quot;nt&quot;&gt;--enable-optimizations&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--with-lto&lt;/span&gt; 

&lt;span class=&quot;c&quot;&gt;# 编译及安装&lt;/span&gt;
make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;配置-modules&quot;&gt;配置 Modules&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /opt/modules/modulefiles/py
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;vim /opt/modules/modulefiles/py/3.10.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  首先如上命令准备文件夹，并新建 module 配置文件，内容如下：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#%Module&lt;/span&gt;
proc ModulesHelp &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    puts stderr &lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;This module file will load Python 3.10.6&lt;span class=&quot;s2&quot;&gt;&quot;
}

module-whatis  &quot;&lt;/span&gt;Enable Python 3.10.6&lt;span class=&quot;s2&quot;&gt;&quot;

eval set  [ array get env HOME ]
set basedir /opt/python/3.10.6
prepend-path PATH &quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;basedir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/bin&lt;span class=&quot;s2&quot;&gt;&quot;
prepend-path LIBRARY_PATH &quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;basedir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/lib&lt;span class=&quot;s2&quot;&gt;&quot;
prepend-path LD_LIBRARY_PATH &quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;basedir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/lib&lt;span class=&quot;s2&quot;&gt;&quot;
prepend-path INCLUDE_PATH &quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;basedir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/include&lt;span class=&quot;s2&quot;&gt;&quot;
prepend-path LD_INCLUDE_PATH &quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;basedir&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/include&lt;span class=&quot;s2&quot;&gt;&quot;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;验证&quot;&gt;验证&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查看所有可用模块&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;module ava
&lt;span class=&quot;nt&quot;&gt;--------------------------&lt;/span&gt; /opt/modules/modulefiles &lt;span class=&quot;nt&quot;&gt;---------------------------&lt;/span&gt;
dot  module-git  module-info  modules  null  py/3.10.6  use.own

Key:
modulepath
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 加载 python 3.10.6 环境，并确认已加载模块&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;module load py/3.10.6
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;module list
Currently Loaded Modulefiles:
 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; py/3.10.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 确认目前 python 版本&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt;
Python 3.10.6
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使用&quot;&gt;使用&lt;/h3&gt;

&lt;p&gt;  由于以上操作将 Python 3.10.6 安装到了一个系统文件夹中，编译完成后会出现如下警告提示。不过无须担心，普通用户可以通过 venv 虚拟环境工具正常使用。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Installing collected packages: setuptools, pip
  WARNING: The scripts pip3 and pip3.10 are installed &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;/opt/python/3.10.6/bin&apos;&lt;/span&gt; which is not on PATH.
  Consider adding this directory to PATH or, &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;you prefer to suppress this warning, use &lt;span class=&quot;nt&quot;&gt;--no-warn-script-location&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Successfully installed pip-22.2.1 setuptools-63.2.0
WARNING: Running pip as the &lt;span class=&quot;s1&quot;&gt;&apos;root&apos;&lt;/span&gt; user can result &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;broken permissions and conflicting behaviour with the system package manager. It is recommended to use a virtual environment instead: https://pip.pypa.io/warnings/venv
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  如下所示，当已经如&lt;strong&gt;验证&lt;/strong&gt;部分加载好 python 3.10.6 模块后，使用以下命令新建虚拟环境、激活后即可使用。&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小提示 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;   新建虚拟环境时最后的参数 env 是指虚拟环境的名字，我们可以取任意符合 python 规则的字符串作为虚拟环境名字。值得注意的是，python 虚拟环境有关的文件将会被安装在命令执行的当前目录下的同名文件夹中。为了便于管理和使用，建议将所有的 python 虚拟环境都放置在同一目录下。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 新建 env 虚拟环境&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;python3 &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; venv &lt;span class=&quot;nb&quot;&gt;env&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 激活 env 虚拟环境&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;source env&lt;/span&gt;/bin/activate

&lt;span class=&quot;c&quot;&gt;# 可以看到 &amp;lt;env&amp;gt; 的环境提示&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 尝试升级 pip，可以看到成功升级 &lt;/span&gt;
╭─zhonger@lep-u ~ ‹env›
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;pip3 &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; pip
Requirement already satisfied: pip &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; ./env/lib/python3.10/site-packages &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;22.2.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Collecting pip
  Using cached pip-23.0.1-py3-none-any.whl &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;2.1 MB&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Installing collected packages: pip
  Attempting uninstall: pip
    Found existing installation: pip 22.2.1
    Uninstalling pip-22.2.1:
      Successfully uninstalled pip-22.2.1
Successfully installed pip-23.0.1

&lt;span class=&quot;c&quot;&gt;# 取消激活 env 虚拟环境&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;deactivate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;有趣的问题&quot;&gt;有趣的问题&lt;/h2&gt;

&lt;p&gt;  如果使用 module 提供的 python 模块创建了虚拟环境后，实际运行虚拟环境时还需要使用 module 加载 python 模块吗？答案是&lt;strong&gt;不需要&lt;/strong&gt;。虚拟环境的本质是拷贝运行相同命令所需的必要文件，如下对比查看一下 python 模块和 env 虚拟环境的顶级目录。可以发现，两者的差别不是很大。env 虚拟环境少了 share 目录，多了 pyvenv.cfg 文件。查看该文件可知，存在与 python 模块之间的关系的声明。再查看 bin 目录，可以看到 python 可执行命令用了链接的方式，pip 命令则是直接从原来的 python 模块复制过来的。于是，这就能允许普通用户自行管理  pip 命令和 python 库了。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /opt/python/3.10.6
bin  include  lib  share

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls env
&lt;/span&gt;bin  include  lib  lib64  pyvenv.cfg

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat env&lt;/span&gt;/pyvenv.cfg
home &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; /opt/python/3.10.6/bin
include-system-site-packages &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;false
&lt;/span&gt;version &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 3.10.6

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ll &lt;span class=&quot;nb&quot;&gt;env&lt;/span&gt;/bin
total 36K
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 zhonger zhonger 8.9K Mar 20 15:20 Activate.ps1
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 zhonger zhonger 2.0K Mar 20 15:20 activate
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 zhonger zhonger  908 Mar 20 15:20 activate.csh
&lt;span class=&quot;nt&quot;&gt;-rw-r--r--&lt;/span&gt; 1 zhonger zhonger 2.1K Mar 20 15:20 activate.fish
&lt;span class=&quot;nt&quot;&gt;-rwxrwxr-x&lt;/span&gt; 1 zhonger zhonger  234 Mar 20 15:20 pip
&lt;span class=&quot;nt&quot;&gt;-rwxrwxr-x&lt;/span&gt; 1 zhonger zhonger  234 Mar 20 15:20 pip3
&lt;span class=&quot;nt&quot;&gt;-rwxrwxr-x&lt;/span&gt; 1 zhonger zhonger  234 Mar 20 15:20 pip3.10
lrwxrwxrwx 1 zhonger zhonger    7 Mar 20 15:20 python -&amp;gt; python3
lrwxrwxrwx 1 zhonger zhonger   30 Mar 20 15:20 python3 -&amp;gt; /opt/python/3.10.6/bin/python3
lrwxrwxrwx 1 zhonger zhonger    7 Mar 20 15:20 python3.10 -&amp;gt; python3
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3/using/unix.html#building-python&quot;&gt;Python 官方文档 - 构建 Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3/using/configure.html#configure-options&quot;&gt;Python 官方文档 - 性能选项&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.python.org/zh-cn/3/tutorial/venv.html&quot;&gt;Python 官方文档 - 虚拟环境和包&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.python.jp/install/ubuntu/index.html&quot;&gt;Ubuntu 環境の Python&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 20 Mar 2023 12:48:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/modules-python.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/modules-python.html</guid>
        
        <category>Linux</category>
        
        <category>Modules</category>
        
        <category>Python</category>
        
        <category>软件环境</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
      <item>
        <title>集群动态环境管理神器 Modules</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;div class=&quot;premonition citation&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon citation&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-citation&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  Modules 包是一款简化 shell 初始化的工具，允许用户在会话期间使用模块文件轻松切换环境。&lt;/p&gt;



 &lt;/div&gt; &lt;div class=&quot;ref&quot;&gt; ------ Environment Modules 官网 &lt;/div&gt; &lt;/div&gt;
&lt;p&gt;  在高性能集群或者超算中，我们可以经常看到 Modules 的身影。它可以帮助我们轻松加载运行程序所需的各类环境，比如说笔者之前写过的第一性原理计算软件 CONQUEST 的运行，就需要包括 Intel OneAPI HPCKit、FFTW3、LibXC 在内的多种环境；又比如说运行大规模的机器学习模型时，可能需要 Python、GPU 环境和 PyTorch 等依赖库。&lt;/p&gt;

&lt;p&gt;  由于集群往往是面向很多人服务的，如果管理员将软件安装到全局环境，则只能安装某个软件的某个特定版本，而不能同时为不同的用户提供所需的同款软件的不同版本。举个例子，笔者编写的代码只能在 Python 3.10 环境下运行，而其他用户编写的代码所支持的 Python 版本是 3.0，那么可能最简单的解决方法是笔者自行编译一个 Python 3.10 的环境，然后利用 PATH 等变量的配置来提升优先级。或许之后有一天，另外一个用户也要使用 Python 3.10 环境，那么是不是让他再自行编译配置一遍呢？哈哈哈，听起来有点无奈，但是&lt;strong&gt;千万不要高估集群的使用用户&lt;/strong&gt;，可能自行编译并配置 Python 3.10 对他们来说也有点困难。因此，Modules 成为了集群动态管理软件环境的最佳选择。集群管理员可以预先编译和配置好各种环境的各种版本，用户使用时只需要执行类似 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module load py/3.10.6&lt;/code&gt; 的命令就可以轻松加载 Python 3.10.6 环境。&lt;/p&gt;

&lt;p&gt;  Modules 所支持的模块不仅仅可以是编程语言的多版本，还可以是其他任意的基础环境，比如说 gcc、openmpi 等编译环境。这样一来，不仅可以为用户提供足够的编程环境直接使用，还可以为一些想要自行编译运行环境的用户提供了便利。&lt;/p&gt;

&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;h3 id=&quot;源码编译安装-modules&quot;&gt;源码编译安装 Modules&lt;/h3&gt;

&lt;p&gt;  Modules 可以在 Linux、Windows、MacOS 任一操作系统上安装运行，这里仅介绍类 Unix 操作系统下的编译安装过程。由于 Modules 需要使用 tcl 工具来解析 modulefiles，所以系统必须预先安装 tcl 及其开发者库。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 根据实际情况三者选其一&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Debian/Ubuntu 等 APT 系列操作系统上安装 tcl&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; tcl tcl-dev
&lt;span class=&quot;c&quot;&gt;# CentOS 等 YUM 系列操作系统上安装 tcl&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;yum &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; tcl tcl-devel
&lt;span class=&quot;c&quot;&gt;# MacOS 操作系统上安装 tcl （需有 brew 工具）&lt;/span&gt;
brew &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;tcl-tk

&lt;span class=&quot;c&quot;&gt;# 下载源代码并解压&lt;/span&gt;
wget &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; https://github.com/cea-hpc/modules/releases/download/v5.1.1/modules-5.1.1.tar.gz
&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xfz modules-5.1.1.tar.gz

&lt;span class=&quot;c&quot;&gt;# 创建安装目录&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /opt/modules

&lt;span class=&quot;c&quot;&gt;# 进入目录并配置安装目录&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;modules-5.1.1
./configure &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/modules
&lt;span class=&quot;c&quot;&gt;# MacOS 可能需要如下另外指定 tclConfig.sh 文件所在的位置&lt;/span&gt;
./configure &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/modules &lt;span class=&quot;nt&quot;&gt;--with-tcl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/homebrew/opt/tcl-tk/lib

&lt;span class=&quot;c&quot;&gt;# 编译并安装到 /opt/modules 目录&lt;/span&gt;
make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;使-modules-生效&quot;&gt;使 Modules 生效&lt;/h3&gt;

&lt;p&gt;  并非是编译完了之后就可以直接使用 Modules，还有至关重要的一步–&lt;strong&gt;添加生效命令&lt;/strong&gt;。首先需要确认当前使用的 Shell 是什么，一般来说默认是 Bash，当然也有 Zsh 等等。然后，在对应的 Shell 配置文件中增加一行生效命令。操作如下所示：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 确认当前使用的 Shell&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$SHELL&lt;/span&gt;
/bin/zsh

&lt;span class=&quot;c&quot;&gt;# 查看 Modules 支持的 Shell&lt;/span&gt;
╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /opt/modules/init
bash            cmake           fish            ksh             lisp            profile.csh     python.py       ruby.rb         tcl             tcsh_completion zsh-functions
bash_completion csh             fish_completion ksh-functions   perl.pm         profile.sh      r.R             sh              tcsh            zsh
&lt;span class=&quot;c&quot;&gt;# 如上所示，大部分流行的 Shell 都在支持列表中&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 使 Modules 生效&lt;/span&gt;
vim ~/.zshrc
&lt;span class=&quot;c&quot;&gt;# 添加以下内容&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /opt/modules/init/zsh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;源码编译安装-tcl&quot;&gt;源码编译安装 tcl&lt;/h3&gt;

&lt;p&gt;  Modules 的编译安装是不是很简单？不过如果 tcl 工具无法使用命令安装的话，就只能从源码编译安装，也比较方便，如下所示：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 下载源码并解压&lt;/span&gt;
wget &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; https://prdownloads.sourceforge.net/tcl/tcl8.6.12-src.tar.gz
&lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;xfz tcl8.6.12-src.tar.gz

&lt;span class=&quot;c&quot;&gt;# 创建安装目录&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo mkdir&lt;/span&gt; /opt/tcl

&lt;span class=&quot;c&quot;&gt;# 进入目录并配置安装目录&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;tcl8.6.12/unix
./configure &lt;span class=&quot;nt&quot;&gt;--prefix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/opt/tcl

&lt;span class=&quot;c&quot;&gt;# 编译并安装&lt;/span&gt;
make &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;make &lt;span class=&quot;nb&quot;&gt;install&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;modules-相关命令&quot;&gt;Modules 相关命令&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 查看所有可用模块&lt;/span&gt;
module avail / module ava

&lt;span class=&quot;c&quot;&gt;# 加载指定模块（支持同时加载多个模块）&lt;/span&gt;
module load py/3.10.6 mpi

&lt;span class=&quot;c&quot;&gt;# 查看已加载模块&lt;/span&gt;
module list

&lt;span class=&quot;c&quot;&gt;# 查看指定模块&lt;/span&gt;
module show py/3.10.6

&lt;span class=&quot;c&quot;&gt;# 添加自定义模块配置目录&lt;/span&gt;
module use &lt;span class=&quot;nt&quot;&gt;--apend&lt;/span&gt; ~/opt/modulefiles
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;添加软件环境&quot;&gt;添加软件环境&lt;/h2&gt;

&lt;h3 id=&quot;modulefiles-库&quot;&gt;Modulefiles 库&lt;/h3&gt;

&lt;p&gt;  Modules 编译安装后默认会有一些环境，它们的配置文件都被存储在安装目录的 modulefiles 文件夹中，如下所示：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;module ava
&lt;span class=&quot;nt&quot;&gt;---------------------------&lt;/span&gt; /opt/modules/modulefiles &lt;span class=&quot;nt&quot;&gt;---------------------------&lt;/span&gt;
dot  module-git  module-info  modules  null  use.own

Key:
modulepath

╰─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /opt/modules/modulefiles
dot         module-git  module-info modules     null        use.own
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  一般来说，打算提供给所有用户的环境配置都可以放在这个目录里，这样任何用户都可以查看到。&lt;/p&gt;

&lt;h3 id=&quot;modulefiles-模板&quot;&gt;Modulefiles 模板&lt;/h3&gt;

&lt;p&gt;  这里我们可以把 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;use.own&lt;/code&gt; 文件作为模板来学习一下如何编写 Modulefiles 文件。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#%Module1.0#####################################################################&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;##&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## use.own modulefile&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;##&lt;/span&gt;
proc ModulesHelp &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    puts stderr &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;This module file will add &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\$&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;HOME/privatemodules to the&quot;&lt;/span&gt;
    puts stderr &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;list of directories that the module command will search&quot;&lt;/span&gt;
    puts stderr &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;for modules.  Place your own module files here.&quot;&lt;/span&gt;
    puts stderr &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;This module, when loaded, will create this directory&quot;&lt;/span&gt;
    puts stderr &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;if necessary.&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

module-whatis   &lt;span class=&quot;s2&quot;&gt;&quot;adds your own modulefiles directory to MODULEPATH&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;eval set&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; array get &lt;span class=&quot;nb&quot;&gt;env &lt;/span&gt;HOME &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;ownmoddir   &lt;span class=&quot;nv&quot;&gt;$HOME&lt;/span&gt;/privatemodules

&lt;span class=&quot;c&quot;&gt;# create directory if necessary&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; module-info mode load &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; file exists &lt;span class=&quot;nv&quot;&gt;$ownmoddir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        file &lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ownmoddir&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;null &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;open &lt;span class=&quot;nv&quot;&gt;$ownmoddir&lt;/span&gt;/null w]
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;#%Module########################################################################&quot;&lt;/span&gt;
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;##&quot;&lt;/span&gt;
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;## null modulefile&quot;&lt;/span&gt;
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;##&quot;&lt;/span&gt;
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;proc ModulesHelp { } {&quot;&lt;/span&gt;
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;    puts stderr &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;This module does absolutely nothing.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;    puts stderr &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;It&apos;s meant simply as a place holder in your&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;    puts stderr &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;dot file initialization.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;}&quot;&lt;/span&gt;
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
        puts &lt;span class=&quot;nv&quot;&gt;$null&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;module-whatis   &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;does absolutely nothing&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

module use &lt;span class=&quot;nt&quot;&gt;--append&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$ownmoddir&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  Modulefiles 文件一般符合以下规则：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Modulefiles 文件必须以 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#%Module1.0&lt;/code&gt; 开头；&lt;/li&gt;
  &lt;li&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;proc ModulesHelp {}&lt;/code&gt; 函数来添加模块详细描述；&lt;/li&gt;
  &lt;li&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;module-whatis&lt;/code&gt; 字段来添加一句话简短描述；&lt;/li&gt;
  &lt;li&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eval set [ array get env HOME]&lt;/code&gt; 来获取系统变量 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$HOME&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;set ownmoddir&lt;/code&gt; 来定义变量 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ownmoddir&lt;/code&gt;；&lt;/li&gt;
  &lt;li&gt;后续脚本可以根据需求进行添加内容。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;  这里先开个坑，后续打算补充 Modules 配置系列文章：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;modules-python.html&quot;&gt;《Modules 配置之 Python》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;modules-conda.html&quot;&gt;《Modules 配置之 Anaconda》&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;modules-intel.html&quot;&gt;《Modules 配置之 Intel OneAPI》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://modules.readthedocs.io/en/latest/index.html&quot;&gt;Environment Modules 官方文档&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 26 Oct 2022 15:48:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/modules.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/modules.html</guid>
        
        <category>Linux</category>
        
        <category>集群</category>
        
        <category>Cluster</category>
        
        <category>Modules</category>
        
        <category>软件环境</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
      <item>
        <title>LDAP 集成之 OpenVPN 篇</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;h3 id=&quot;easy-connect&quot;&gt;Easy Connect&lt;/h3&gt;

&lt;p&gt;  公司、学校、云服务等一般需要将内外网进行分离，如果想要从外部网络访问某些内部应用，通常需要使用公司、学校、云服务提供的专用网络接入服务。国内公司、学校比较常用的是由深信服开发的 Easy Connect，一种 SSL VPN 技术的实现。虽然每年需要支付一定的费用来维护、升级 Easy Connect 服务，但是毕竟它能够提供比较细粒度的权限控制，比如说对目标 IP、目标端口的特别指定，能够有效保护内网服务器只有 Web 应用本身能被用户接入，而类似于 SSH 等服务及端口则可以通过单独申请和配置来实现。总而言之，除了需要付费，似乎没有什么不好的地方。&lt;/p&gt;

&lt;p&gt;  实际上如果是在大公司或者学校的话，可能在内网里面还会有更深的内网存在。举个例子，正常的内网是日常的办公或开发网络，服务器所处的内网是独立的网络，即使是已经连接了办公网络，还是需要通过专用网络接入服务器内网才能进行服务器的维护。如果是以数据中心的模式运营的话，甚至说每一次访问服务器都是需要经过临时审批和登录密码发放的。一旦过了有效时间或者完成了任务，访问都将会被拒绝。&lt;/p&gt;

&lt;h3 id=&quot;openvpn&quot;&gt;OpenVPN&lt;/h3&gt;

&lt;p&gt;  虽然 Easy Connect 可以用于上述的场景，但是似乎显得有些大材小用了，毕竟还是要支付一定费用的。为了尽量降低成本，开源的 OpenVPN 或许是一种不错的选择。据笔者所知，Easy Connect 根据购买的许可不同允许的同时在线人数可能也会不同，实际上可能存在“需大于供”的问题。为了缓解这一可能存在的问题，还是会搭建一套 OpenVPN 来作为冗余接入方式。其实 OpenVPN 的商业版本许可也是会有人数限制的，只不过因为只是备份方式也没有太大关系。&lt;/p&gt;

&lt;p&gt;  OpenVPN 除了开源免费之外，还支持大部分主流的认证方式，比如说 LDAP 认证、微软的商业级目录服务 Active Directory（简称 AD）认证等。近年来，基于 Identify Provider（简称 IdP）、Single Sign On（简称 SSO）、Central Authentication Service（简称 CAS）等的国产化的一站式登录服务解决方案也在逐渐替换原来的 LDAP 或 AD 直接认证，LDAP 或 AD 将作为底层的基础认证方式存在。所以说，开源免费的 LDAP 目录服务在一般的团队中还是足够的，作为 OpenVPN 的认证方式也是完全能满足要求的。&lt;/p&gt;

&lt;div class=&quot;premonition warning&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon warning&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-warning&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 提醒 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  在公网上搭建专用网络接入服务是需要有工信部颁发的专门资格许可的，一般公司、学校、云服务都是有该类资格许可，所以可以对外提供该项服务。而个人是无法获得这类许可，除非注册公司并申请该类许可。如果个人在云服务上搭建该类服务，将会面临被云服务提供商警告甚至单方面停止服务的风险。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;h3 id=&quot;环境要求&quot;&gt;环境要求&lt;/h3&gt;

&lt;p&gt;  在实践前请务必保证具备以下环境：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker&lt;/li&gt;
  &lt;li&gt;docker-compose&lt;/li&gt;
  &lt;li&gt;可用的 LDAP 目录服务&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;启动实例&quot;&gt;启动实例&lt;/h3&gt;

&lt;p&gt;  为了方便部署和测试，这里采用 &lt;a href=&quot;https://hub.docker.com/r/wheelybird/openvpn-ldap-otp&quot;&gt;wheelybird/openvpn-ldap-otp&lt;/a&gt; 提供的 Docker 镜像。这个镜像比较小，同时也支持 x64 和 arm 两种体系架构，能满足大部分主流服务器平台。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# docker-compose.yml&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&apos;&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;openvpn&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;cap_add&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;NET_ADMIN&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;wheelybird/openvpn-ldap-otp&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;openvpn&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1194:1194/udp&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/localtime:/etc/localtime:ro&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/timezone:/etc/timezone:ro&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./openvpn-data:/etc/openvpn&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;OVPN_SERVER_CN=oc-vpn.example.com&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_URI=ldap://ldap.example.com&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_BASE_DN=ou=users,dc=example,dc=com&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_BIND_USER_DN=cn=admin,dc=example,dc=com&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_BIND_USER_PASS=password&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_LOGIN_ATTRIBUTE=uid&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LOG_TO_STDOUT=false&lt;/span&gt;
     &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;OVPN_DNS_SEARCH_DOMAIN=example.com&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  使用以下 docker-compose.yml 文件和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt; 命令启动实例。为了能够避免实例在重新创建后证书发生改变，将 Docker 实例中 /etc/openvpn 的目录持久化（与本地目录绑定）是非常重要的。在这里给出的环境变量（environment）中，前三项 OVPN_SERVER_CN、LDAP_URI、LDAP_BASE_DN 是必须要有的。如果 LDAP 目录服务默认是不能被匿名查找的，也必须包含 LDAP_BIND_USER_DN 和 LDAP_BIND_USER_PASS 变量的（即管理员账户名和密码）。当然，如果你想要指定匹配登录用户名字段，则需要新增 LDAP_LOGIN_ATTRIBUTE 变量。该变量默认是 uid 字段，也可以指定为其他 LDAP 目录服务中包含的字段，比如 email。这个镜像默认是会将服务的实时输出打印在终端，如果想要以日志文件的形式保存下来，则将变量 LOG_TO_STDOUT 置为 false 即可。&lt;/p&gt;

&lt;p&gt;  一般来说，服务器内网为了管理方便，会根据服务器的 ip 和编号来配置对应的域名解析及反向域名解析，形如 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ec2-1-1-1-1.aws.com&lt;/code&gt;，也有可能就是简单的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c1.sever.aws.com&lt;/code&gt;。所以当接入服务器内网后，我们可能会期望用 c1 来作为这台服务器的标签，而在终端我们也可能通过 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping c1&lt;/code&gt; 来测试通路。实际上只要在启动实例时新增变量 OVPN_DNS_SEARCH_DOMAIN 就可以实现，当然这里变量对应的值也应该变成 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server.aws.com&lt;/code&gt;。相当于，有了这个配置后，本地 DNS 解析没有记录时会自动尝试加入后缀来解析。这样一来，是不是方便了很多呢？&lt;/p&gt;

&lt;p&gt;  除此之外，该镜像还支持其他一些特性，比如 OTP，请访问 &lt;a href=&quot;https://github.com/wheelybird/openvpn-server-ldap-otp&quot;&gt;wheelybird/openvpn-ldap-otp&lt;/a&gt; 了解更多。&lt;/p&gt;

&lt;h4 id=&quot;生成配置文件&quot;&gt;生成配置文件&lt;/h4&gt;

&lt;p&gt;  在生成配置文件上，&lt;a href=&quot;https://github.com/wheelybird/openvpn-server-ldap-otp&quot;&gt;wheelybird/openvpn-ldap-otp&lt;/a&gt; 要比 &lt;a href=&quot;https://github.com/kylemanna/docker-openvpn&quot;&gt;kylemanna/docker-openvpn&lt;/a&gt; 更复杂一些，可以手动从 Docker 实例的日志文件或终端输出内容中看到内容，大致内容形式如下所示：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#---------- Start of client.ovpn ----------&lt;/span&gt;

client
tls-client
dev tun
persist-key
persist-tun
remote-cert-tls server
key-direction 1
auth SHA512
proto tcp
reneg-sec 0

comp-lzo
redirect-gateway def1
auth-user-pass

&lt;span class=&quot;c&quot;&gt;# Set log file verbosity&lt;/span&gt;
verb 3

&amp;lt;connection&amp;gt;
remote oc-vpn.example.com 1194 udp
float
nobind
&amp;lt;/connection&amp;gt;

&amp;lt;ca&amp;gt;
&lt;span class=&quot;nt&quot;&gt;-----BEGIN&lt;/span&gt; CERTIFICATE-----
.........
.........
&lt;span class=&quot;nt&quot;&gt;-----END&lt;/span&gt; CERTIFICATE-----
&amp;lt;/ca&amp;gt;
&amp;lt;tls-auth&amp;gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 2048 bit OpenVPN static key&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-----BEGIN&lt;/span&gt; OpenVPN Static key V1-----
.........
.........
&lt;span class=&quot;nt&quot;&gt;-----END&lt;/span&gt; OpenVPN Static key V1-----
&amp;lt;/tls-auth&amp;gt;
key-direction 1
&lt;span class=&quot;c&quot;&gt;#----------  End of client.ovpn  ----------&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  将以上内容复制保存在 oc-vpn.example.com.ovpn 文件中即可。&lt;/p&gt;

&lt;h3 id=&quot;测试&quot;&gt;测试&lt;/h3&gt;

&lt;p&gt;  通常来说使用 OpenVPN 专用或者兼容客户端来加载配置文件 oc-vpn.example.com.ovpn，当然也可以用终端命令连接，如下所示：&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;openvpn &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; oc-vpn.example.com.ovpn
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  执行上述命令后会提示输入用户名和密码进行认证，认证通过后会建立连接。默认分配的是 10.50.50.0/24 段中的某个 IP，网关为 10.50.50.254，当然这个也可以在启动实例时自行设置。&lt;/p&gt;

&lt;div class=&quot;premonition warning&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon warning&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-warning&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 再次提醒 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  以上内容比较适用于团队办公或开发网络与服务器网络独立分离的情况（&lt;strong&gt;内网环境&lt;/strong&gt;）。请勿在未获得工信部的资质许可的情况下在公网部署类似服务，一旦被云服务提供商监测到，云服务提供商有权进行警告、断网、关停等操作，并且无法申诉。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/wheelybird/openvpn-server-ldap-otp&quot;&gt;wheelybird/openvpn-ldap-otp&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/kylemanna/docker-openvpn&quot;&gt;kylemanna/docker-openvpn&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;premonition note&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon note&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-note&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 提示 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;我的博客即将同步至腾讯云开发者社区，邀请大家一同入驻：&lt;a href=&quot;https://cloud.tencent.com/developer/support-plan?invite_code=1jkj42lj2m4nn&quot;&gt;加入链接&lt;/a&gt;。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
</description>
        <pubDate>Wed, 28 Sep 2022 15:04:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/ldap-openvpn.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/ldap-openvpn.html</guid>
        
        <category>LDAP</category>
        
        <category>OpenVPN</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
      <item>
        <title>LDAP 集成之 Squid 篇</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;p&gt;  Squid cache，简称 Squid，是一款高性能的代理缓存软件。Squid 本身支持包括 HTTP、HTTPS、FTP、SSH 在内的多种协议，且采用一个单独的、非模块化的、I/O 驱动的进程来处理所有的客户端请求，从而提供&lt;strong&gt;主动缓存加速&lt;/strong&gt;的功能。除此之外，Squid 还可以提供&lt;strong&gt;应用层过滤控制&lt;/strong&gt;的功能，也可与其他的&lt;strong&gt;防病毒&lt;/strong&gt;软件一起使用。在一些大公司、学校、研究机构内部，一般采用 Squid 代理上网的方式，可以过滤危险内容或操作、节省网络带宽、提升访问速度。&lt;/p&gt;

&lt;p&gt;  但实际上 Squid 代理也可用于正向代理，即为外来用户访问内网应用提速。这也是 CDN（内容分发网络）的加速原理，利用位于全球网络边缘的节点提供服务，而实际上的应用内容则通过边缘节点间的内网来缓存提速。&lt;/p&gt;

&lt;p&gt;  虽然 Squid 一般部署在团队或公司网络内部，但是由于用户的权限不同可能需要应用不同的规则，所以能够与 LDAP 认证服务结合就变得非常重要了。&lt;/p&gt;

&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;h3 id=&quot;环境要求&quot;&gt;环境要求&lt;/h3&gt;

&lt;p&gt;  在进行正式的实践之前，务必确保已有以下环境：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker&lt;/li&gt;
  &lt;li&gt;docker-compose&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;启动实例&quot;&gt;启动实例&lt;/h3&gt;

&lt;p&gt;  笔者已经编译并公开了在多种体系架构上可用的 Docker 镜像 &lt;a href=&quot;https://github.com/zhonger/docker-squid&quot;&gt;zhonger/squid&lt;/a&gt;。这里直接使用以下 docker-compose.yml 配置文件和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt; 命令启动实例。&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# docker-compose.yml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&apos;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3.2&apos;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;na&quot;&gt;squid&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zhonger/squid&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;squid&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;hostname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;squid&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3128:3128&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/timezone:/etc/timezone:ro&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/localtime:/etc/localtime:ro&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SQUID_SSH=true&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SQUID_RSYNC=false&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_ENABLE=true&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_HOST=yourldap.domain.com&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_PORT=389&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_BindDN=&quot;cn=admin,dc=yourdomain,dc=com&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_BindPass=&quot;********&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_DN=&quot;ou=Users,dc=yourdomain,dc=com&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;LDAP_ATTRIBUT=&quot;uid=%s&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PROXY_NAME=&quot;Proxy Display Name&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  上面有关的配置变量及其含义可以访问 &lt;a href=&quot;https://github.com/zhonger/docker-squid&quot;&gt;zhonger/squid&lt;/a&gt; 了解更多。&lt;/p&gt;

&lt;h4 id=&quot;测试&quot;&gt;测试&lt;/h4&gt;

&lt;p&gt;  通过浏览器访问 http://ip:3128 并输入对应的用户名和密码可以看到类似下面的内容。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/nUOnpb.webp&quot; alt=&quot;nUOnpb&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;客户端连接&quot;&gt;客户端连接&lt;/h3&gt;

&lt;p&gt;  由于我们未指定实际需要访问的地址，Squid 会直接报错。一般使用时，需要使用操作系统的网络设置中的代理来配置好 Squid。如下图所示，勾选“网页代理（HTTP）”并填写相关的 IP、端口、用户名及密码。如果想要同样应用在访问 HTTPS 站点，则还需要勾选“安全网页代理（HTTPS）”及填写相关信息。然后点击保存生效。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/oXWsLE.webp&quot; alt=&quot;oXWsLE&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  这样一来就可以将访问的流量完全交给 Squid 来控制了。当然，如果不确定客户端连接是否成功，可以通过访问 &lt;a href=&quot;https://ip.sb&quot;&gt;ip.sb&lt;/a&gt; 来确认当前客户端流量出口 IP 是否为 Squid 服务器 IP。&lt;/p&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.squid-cache.org/&quot;&gt;Squid cache&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zh.wikipedia.org/zh-cn/Squid_(%E8%BD%AF%E4%BB%B6)&quot;&gt;Squid 软件&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 28 Sep 2022 15:00:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/ldap-squid.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/ldap-squid.html</guid>
        
        <category>LDAP</category>
        
        <category>Squid</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
      <item>
        <title>内网私有域名解析</title>
        <description>&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;

&lt;h3 id=&quot;域名和域名解析&quot;&gt;域名和域名解析&lt;/h3&gt;

&lt;p&gt;  大家可能知道，在网络被发明出来之后一段时间，大家采用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP + Port&lt;/code&gt; 的方式一起共享资源。后来随着资源越来越多，这样一种方式显得非常不友好。比如说，现在有 254 个 IP，每个 IP 上有 20 个 Web 应用，那么我们就必须记住 5080 个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP + Port&lt;/code&gt; 的组合，简直太折磨人了。于是在 1983 年，保罗・莫卡派乔斯发明了域名解析服务和域名服务（DNS，Domain Name System）。从此以后，大家开始用域名来访问各种各样的应用服务。显然，相比原来 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;IP + Port&lt;/code&gt; 的方式，域名的含义更加具象、更容易被人记住。&lt;/p&gt;

&lt;p&gt;  域名解析实际上就是把 IP 和一串有意义的字符对应，这是一对多的关系，即一个 IP 可能对应多个域名。域名的管理单位我们称之为域名注册管理机构，他们掌握着顶级域名的管理权利。比如说，.net、.com、.org 就是顶级域名，域名注册管理机构对顶级域名具有完整的权利。就像上次讲到的 SSL 根证书一样，光有域名注册管理机构还是不够的，他们没有办法直接把域名卖给全世界所有的公司或者个人，而是需要域名注册商承担这部分工作。像我们比较熟知的国内的万网（现在阿里云域名）、DNSPod（现在腾讯云域名）等，国外的 Gandi、Godaddy 等，都是域名注册商。顶级域名根据用途不同可以分为，国别域名后缀和通用域名后缀。国别域名后缀就是指定给各个国家或地区使用的，通用域名后缀就是其余的。我们可以在某域名注册商处购买某个域名后缀（也称顶级域名）的子域名（也称二级域名），比如说我们可以购买域名后缀为 .com 的域名 baidu.com（当然 baidu.com 早就被注册了，我们只能购买还未被注册的域名）。由于一些品牌效应，大部分域名后缀都会保留一些子域名，我们一般称之为&lt;strong&gt;溢价域名&lt;/strong&gt;。一般来说，溢价域名也会比普通域名价格更贵。当我们购买了域名之后，域名注册商会免费提供域名解析服务。当然，我们也可以要求使用其他厂商提供的免费或收费域名解析服务，甚至也可自行搭建域名解析服务。&lt;/p&gt;

&lt;div class=&quot;premonition warning&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon warning&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-warning&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小提醒 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  国内需具备一定资质才能在公网上搭建域名解析服务，否则会面临警告和阻断的风险。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;p&gt;  为了简便，我们一般把域名解析服务称为 DNS 服务。在操作系统中，53 端口被视为 DNS 服务的标准端口（TCP/UDP 服务），853 端口被视为 DNS over TLS 的标准端口（TCP 服务）。除此之外，DNS over HTTPS（TCP 服务）和 DNS over Quic（新协议，UDP 服务）的标准端口是 443。所以现有能够公开使用的 DNS 服务都采用了标准端口，比如国内著名的 114 DNS、阿里云 DNS、腾讯云 DNS、百度云 DNS 都是如此。如果想要了解更多开放可用的 DNS 服务可以查看 &lt;a href=&quot;https://adguard-dns.io/kb/general/dns-providers/&quot;&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;div class=&quot;premonition note&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon note&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-note&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小知识 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  DNS 按照功能上的不同可以分为 &lt;strong&gt;权威 DNS&lt;/strong&gt; 和 &lt;strong&gt;递归 DNS&lt;/strong&gt;。权威 DNS 负责对某个或多个子域名进行管理，注册商提供的域名解析服务就是这一类。递归 DNS 负责接收客户端的请求并将查询到的域名对应记录返回给客户端，也就是说它本身不对任何子域名进行管理，只转述别人告诉它的结果。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;p&gt;  当我们使用 DNS 时，它（这里指递归 DNS）会如下图所示按照域名系统的构成逐级进行查询。比如说，现在我们想访问 www.baidu.com：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;客户端（我们）向递归 DNS 请求解析 www.baidu.com；&lt;/li&gt;
  &lt;li&gt;递归 DNS 会先去问一下它的上游 DNS，如果不存在上游 DNS，它就只能去问 DNS 根服务器；&lt;/li&gt;
  &lt;li&gt;DNS 根服务器并不知道具体的解析记录，但是会告诉递归 DNS 顶级域名 .com 的 DNS 服务器；&lt;/li&gt;
  &lt;li&gt;递归 DNS 接着向 .com 的 DNS 服务器询问；&lt;/li&gt;
  &lt;li&gt;结果 .com 的 DNS 服务器也不知道具体的解析记录，但是会告诉递归 DNS 二级域名 baidu.com 的 DNS 服务器；&lt;/li&gt;
  &lt;li&gt;这样递归 DNS 才会去问域名 baidu.com 的权威 DNS；&lt;/li&gt;
  &lt;li&gt;然后，baidu.com 权威 DNS 响应 www.baidu.com 对应的 A 记录（或者 AAAA 记录）是什么；&lt;/li&gt;
  &lt;li&gt;最后，递归 DNS 将解析结果告诉客户端（我们）。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/hwyKGH.webp&quot; alt=&quot;域名解析过程 DNS Resolution Process&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  那么问题来了，&lt;strong&gt;一个 DNS 能否同时是权威 DNS 和递归 DNS 呢？&lt;/strong&gt;实际上是不可能的，但是可以实现这种效果。如果我们把权威 DNS 隐藏在递归 DNS 的后面，那么对于顶级域名 DNS 来说，你指定的递归 DNS 就是它理解的权威 DNS。这里的隐藏指的是，当有请求询问递归 DNS 的权威解析记录时，递归 DNS 根据规则将请求转发给背后真正的权威 DNS。等待权威 DNS 返回解析记录后，递归 DNS 再把结果返回给请求方（其他递归 DNS 或者客户端）。&lt;/p&gt;

&lt;h3 id=&quot;私有域名解析&quot;&gt;私有域名解析&lt;/h3&gt;

&lt;h4 id=&quot;必要性&quot;&gt;必要性&lt;/h4&gt;

&lt;p&gt;  以上谈到的都是公有域名的相关事情，为什么又要考虑私有域名解析呢？首先，公有域名和私有域名本质上可以没有区别，都是在域名注册商处购买的域名，也可以有所区别，即私有域名是未购买的或者是非 ICANN 支持的域名（比如 .lisz 后缀）。这样一来，我们将不再受&lt;strong&gt;域名是否注册&lt;/strong&gt;的限制而应用在内部网络中。&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小提示 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  当然，我们应当避免使用 ICANN 支持的域名后缀且可注册的域名，毕竟可能以后会有人购买这个域名。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;p&gt;  其次，解析记录的&lt;strong&gt;内外分离&lt;/strong&gt;需求。随着基础服务架构和应用架构的不断发展，越来越多像云计算、Kubernetes 这样需要采用域名解析来连通内部服务。如果我们直接采用一个权威 DNS 来解析这些记录，那就意味着所有人都可以通过查询来知道这些解析记录，甚至有些人就能大致猜出服务架构，这并不是很安全。出于安全上的考量，将同一个域名的解析记录进行内外分离能够在一定程度上提升安全。&lt;/p&gt;

&lt;p&gt;  如参考资料中《内网域名系统的安全保密风险研究》所说，“随着内网规模的不断扩大，特别是国家电子政务内网的建成、扩展，在电子政务内网中构建国家级可信内网域名体系的需求越来越迫切，内网域名系统会成为内网的核心基础设施，其安全问题将会越来越被关注。”私有域名解析，即内网域名系统在内网安全中发挥着举足轻重的作用。&lt;/p&gt;

&lt;h4 id=&quot;用途&quot;&gt;用途&lt;/h4&gt;

&lt;p&gt;  笔者在实际使用 AWS、Azure、Oracle、阿里云、腾讯云、Ucloud 的过程中，也发现了私有域名解析的应用。举个例子，Oracle 云创建的每一台 VPS 都会有一个内部 FQDN（以 oraclecv.com 为后缀的多级域名）。当你在 VPS 上使用 dig 命令查询这个 FQDN 对应的 A 记录时，VPS 的内网 IP 会被返回。当你在自己的设备上使用 dig 命令查询时，返回为空。再举个例子，云计算厂商的 VPS 默认配置的是他们自家的镜像源，比如腾讯云 VPS 的默认镜像源域名为 mirrors.tencentyun.com，而这个域名在公网上是查不到解析记录的。可见，云计算厂商的架构上也在使用私有域名解析。&lt;/p&gt;

&lt;p&gt;  当然，云计算厂商们也向用户提供依托于 VPC（私有网络）的私有域名解析服务，即该私有域名解析服务只有在同一 VPC 内的 VPS 可以使用。而我们又知道，VPC 是属于用户个人的，也就是说不同用户之间的私有域名解析服务完全互不干扰。&lt;/p&gt;

&lt;p&gt;  在参考资料一中，阿里云列出了实际云服务中私有域名解析的四大应用场景：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;主机名管理&lt;/strong&gt;：根据用途、机器信息语义化命名，对运维人员更友好。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;内部调用 API&lt;/strong&gt;：内部 API 用域名来访问，即使对应集群或者 IP 发生变化，也可以无感切换。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;内部域名隐私保护&lt;/strong&gt;：和上面笔者提到的必要性第二点一样，提升隐私保护。&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;私有地址反向解析&lt;/strong&gt;：绑定后可以通过 host、traceroute 或其他操作直接识别访问 IP 的来源，便于运维人员排查问题。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;premonition note&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon note&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-note&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小知识 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  域名解析分为&lt;strong&gt;正向解析&lt;/strong&gt;和&lt;strong&gt;反向解析&lt;/strong&gt;，我们一般见过的“域名 → IP”的域名解析就是正向解析，而反向解析则是“IP → 域名”。一般来说，反向解析多用于邮件服务器的可信认证。将 IP 与 邮件服务器域名的正反向解析都绑定后，能够增强邮件服务器的可信度，降低被收信服务器判定为 &lt;strong&gt;垃圾 IP&lt;/strong&gt; 发信的概率。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h2 id=&quot;实践&quot;&gt;实践&lt;/h2&gt;

&lt;h3 id=&quot;方案一&quot;&gt;方案一&lt;/h3&gt;

&lt;p&gt;  内网私有域名解析实际上就是要在内网中搭建一台权威 DNS 和递归 DNS：权威 DNS 用于管理私有域名，递归 DNS 用于解析权威 DNS 记录以及正常的公网解析记录。当然，在公司网络或者机房集群网络中，一般会搭建权威 DNS 集群和递归 DNS 集群来提升可靠性和可用性。权威 DNS 集群通常是主从架构，主节点作为接受域名解析操作的主要接收方，从节点将实时同步主节点记录。当主节点发现故障时，从节点自动升级为主节点。并非所有的集群都是这样，但是这样更加能避免因主节点宕机后无法进行域名解析的更改操作。由于这与采用架设 DNS 服务的软件相关，这里就不作过多探讨。&lt;/p&gt;

&lt;p&gt;  与权威 DNS 集群不同的是，内网递归 DNS 集群实际上一般会有两个节点暴露出来。这一点与公网中提供公网递归 DNS 服务是一样的。比如 114 DNS 会告诉大家要设置两个 DNS IP 地址，即 114.114.114.114 和 114.114.115.115。为什么要这样呢？主要还是因为通过冗余来提高可靠性和可用性。我们可能会简单地以为 114 DNS 就只有这两个 IP，但实际上它们的背后还有很多台递归 DNS 服务器。这两台服务器的作用并不是直接处理解析请求，而是为想要域名解析的客户端提供一个更加快和高效的方式来使用递归 DNS。类似于复杂 Web 系统中首先会在交换机上用网关进行优化，然后在服务器上利用 LVS 来负载均衡，之后再利用多个服务后台来分别处理相同的业务，最后再返回信息给用户。这两台递归 DNS 节点也起到了负载均衡的作用。&lt;/p&gt;

&lt;p&gt;  当然，这两个 IP 也不是一般的 IP，而是使用了 Anycast 技术的 IP。也就是说，在互联网上会有多台服务器使用了这两个 IP，而当我们向这两个 IP 发起请求时，BGP 会根据客户端所处的地理位置和网络情况将 IP 定位到离客户端最近的两台服务器上。有一个比较客观的体验就是，当我们在全国不同地方 ping 这两个 IP 时，发现似乎延迟差不多且都很短。但是无论我们的骨干网建得多么好，因地理位置和跨网（电信、联通、移动、教育网）所带来的延迟也是无法避免的。唯一一个延迟都很短的可能解释就是响应请求的机器实际上并非同一位置的同两台，而是位于不同位置的不同两台。&lt;/p&gt;

&lt;h3 id=&quot;方案二&quot;&gt;方案二&lt;/h3&gt;

&lt;p&gt;  上面的方案考虑的问题比较多，也比较适合在大规模集群或内网中进行实践，但是在小集群中可能就有点过于庞大了，显得没有必要。其实，小集群或者小团队内网可以采用“合二为一”的方案，即递归 DNS 与权威 DNS 由一台服务器来同时提供。由于小集群内网私有域名解析和公有域名解析不需要接近于零的宕机率，所以完全可以最简化。当前最流行的免费解决方案可能就是 AdGuard Home 了。&lt;/p&gt;

&lt;div class=&quot;premonition citation&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon citation&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-citation&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  AdGuard Home 是一款全网广告拦截与反跟踪软件。在您将其安装完毕后，它将保护您所有家用设备，同时您不再需要安装任何客户端软件。随着物联网与连接设备的兴起，掌控您自己的整个网络环境变得越来越重要。&lt;/p&gt;



 &lt;/div&gt; &lt;div class=&quot;ref&quot;&gt; ------ AdGuard 主页 &lt;/div&gt; &lt;/div&gt;
&lt;p&gt;  AdGuard Home 之所以这么受到欢迎，主要是因为其丰富的功能和简单的可视化操作，对于管理员来说非常友好。而且，AdGuard Home 的部署也非常简单，支持多平台架构、多方式一键部署，比如 AdGuard Home 也能在 ARM 芯片上用 Docker 容器的方式一键部署。虽然 AdGuard Home 自带简单的解析记录重写，可以满足大部分常用的内网私有域名解析需求，但是像一些比较高级的解析记录可能就无法做到，比如 TXT 记录。尽管 TXT 记录在 &lt;strong&gt;IP&lt;/strong&gt; 和&lt;strong&gt;域名&lt;/strong&gt;的相互映射中并不起到作用，但是 TXT 记录可以填写比较长的内容，非常适合用来验证对于域名的管理权限，像 HTTPS 证书的申请一般就是采用新增 TXT 记录的方式验证，还有 Gitlab Page 的自定义域名绑定也是如此。所以为了提供比较完整的域名解析服务，这里还是建议增加一个权威 DNS，可以采用 PowerDNS + PowerDNS Admin（交互界面）或者 Bind9 等。&lt;/p&gt;

&lt;p&gt;  考虑到友好的交互界面更容易上手使用，这里只介绍 AdGuard Home + PowerDNS 的方案。需要提前准备的环境有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker&lt;/li&gt;
  &lt;li&gt;docker-compose&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;adguard-home&quot;&gt;AdGuard Home&lt;/h3&gt;

&lt;p&gt;  由于 AdGuard Home 官方已经提供了多平台架构的 Docker 镜像，我们直接使用即可，docker-compose.yml 文件如下所示：&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;adgurad&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;adguard/adguardhome&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;53:53/tcp&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;53:53/udp&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;80:80/tcp&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;443:443/tcp&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;3000:3000/tcp&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./work:/opt/adguardhome/work&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./conf:/opt/adguardhome/conf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt; 命令启动 AdGuard Home 实例。&lt;/p&gt;

&lt;h4 id=&quot;初始化&quot;&gt;初始化&lt;/h4&gt;

&lt;p&gt;  使用浏览器访问 &lt;a href=&quot;http://localhost:3000&quot;&gt;http://localhost:3000&lt;/a&gt; 进行实例初始化设置，如下所示根据页面提示设置好用户名和密码。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/PreFoj.webp&quot; alt=&quot;初始化 AdGuard Home Initial&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/7LHDlg.webp&quot; alt=&quot;确认端口 Check ports&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/qjTNW8.webp&quot; alt=&quot;设置管理员 Set Admin&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/yLkLc4.webp&quot; alt=&quot;客户端配置指南 Client setting guideline&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/buQ6LT.webp&quot; alt=&quot;完成初始化 Finish the initialization&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  初始化成功后，页面会自动跳转到登录界面 &lt;a href=&quot;http://localhost&quot;&gt;http://localhost&lt;/a&gt;（80 端口）。&lt;/p&gt;

&lt;div class=&quot;premonition info&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon info&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-info&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小提示 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  由于在实际环境中，我们不一定是在本机启动该实例，所以可能需要使用服务器的 IP 来替代 localhost 访问。另外，如果原来就有 Nginx 或其他服务占用了 80 端口，我们在配置端口映射的时候可能就会设置到另外一个端口，因此自动跳转到的页面并非是 AdGuard Home 的首页。我们需要使用 IP + 映射 80 的端口来定位到首页。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/Wwb5At.webp&quot; alt=&quot;登录页面 AdGuard Home Login&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;私有域名转发&quot;&gt;私有域名转发&lt;/h4&gt;

&lt;p&gt;  由于接下来我们将要用 PowerDNS 来管理权威域名解析，所以需要设置私有域名规则，即当 AdGuard Home 收到关于内网自定义权威域名的请求时，就会把请求转给 PowerDNS。这在 AdGuard Home 中也是比较容易就能设置好的，如下图所示，添加一行规则使得匹配的所有二级域名请求转发给 PowerDNS。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/4GMZAO.webp&quot; alt=&quot;配置转发 Redirect to Authroized DNS&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;powerdns&quot;&gt;PowerDNS&lt;/h3&gt;

&lt;p&gt;  虽然 PowerDNS 和 PowerDNS-Admin 官方都提供了 Docker 镜像，但是搭配起来用还是有点莫名其妙的问题。为了更加简单，笔者参考官方自行构建了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zhonger/pdns&lt;/code&gt; 和 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zhonger/powerdns-admin&lt;/code&gt; 两个 Docker 镜像，搭配使用更加便捷可用。如果想要了解更多，可以查看 &lt;a href=&quot;../docker/powerdns.html&quot;&gt;《Docker 镜像构建之 PowerDNS 篇》&lt;/a&gt;。
  &lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3&quot;&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;pdns&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zhonger/pdns:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;753:53/tcp&quot;&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;753:53/udp&quot;&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# - &quot;8081:8081&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PDNS_launch=gsqlite3&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PDNS_gsqlite3_database=/var/lib/powerdns/pdns.sqlite3&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PDNS_webserver_address=0.0.0.0&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PDNS_webserver_allow_from=127.0.0.1,10.0.0.0/8,172.0.0.0/8,192.168.0.0/16&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PDNS_api=yes&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;PDNS_api_key={Random Long String}&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/localtime:/etc/localtime:ro&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./powerdns:/var/lib/powerdns&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;db&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_ALLOW_EMPTY_PASSWORD=yes&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_DATABASE=powerdnsadmin&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_USER=pdns&lt;/span&gt; 
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_PASSWORD=mypdns&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/localtime:/etc/localtime:ro&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./pda-mysql:/var/lib/mysql&lt;/span&gt;

  &lt;span class=&quot;na&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zhonger/powerdns-admin:latest&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;depends_on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;db&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;pdns&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;8080:80&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;logging&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;driver&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;json-file&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;max-size&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;50m&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/localtime:/etc/localtime:ro&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;SQLALCHEMY_DATABASE_URI=mysql://pdns:mypdns@db/powerdnsadmin&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GUNICORN_TIMEOUT=60&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GUNICORN_WORKERS=2&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;GUNICORN_LOGLEVEL=DEBUG&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;OFFLINE_MODE=False&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# True for offline, False for external resources &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;  使用 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;docker-compose up -d&lt;/code&gt; 命令启动 PowerDNS 和 PowerDNS-Admin 实例。&lt;/p&gt;

&lt;h4 id=&quot;初始化用户&quot;&gt;初始化用户&lt;/h4&gt;

&lt;p&gt;  PowerDNS-Admin 本身不会自动初始化管理员用户，而是将注册的第一个用户认定为管理员用户。使用浏览器访问 PowerDNS-Admin 登录页面 &lt;a href=&quot;http://localhost:8080&quot;&gt;http://localhost:8080&lt;/a&gt;，如下图所示点击 Create an account 链接跳转到注册页。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/9NDNpc.webp&quot; alt=&quot;PowerDNS-Admin 登录页 Login page&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  如下图所示，填写姓名、邮箱、用户名和密码，点击 Register 按钮即可完成注册。这里，PowerDNS-Admin 默认采用邮箱的 Gavatar 头像作为用户头像。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/TJqhDE.webp&quot; alt=&quot;PowerDNS-Admin 注册页 Register page&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;初始化配置&quot;&gt;初始化配置&lt;/h4&gt;

&lt;p&gt;  注册和登录后，会跳转到 PDNS 配置页面。这里由于 PDNS 和 PowerDNS-Admin 实例是在同一个网络中，可以直接使用 pdns 来代替 PDNS 实例的 IP 地址。PDNS API KEY 则是刚才启动时设置的那一长串字符（PDNS_api_key）。PDNS VERSION 最好是与 PDNS 实际使用的一致，不过不一致也不会有什么事。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zhonger/pdns:latest&lt;/code&gt; 目前实际是 4.6 版本，这里默认填的 4.1.1 也可以。然后点击 Update 按钮保存配置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/CJ1Wl1.webp&quot; alt=&quot;CJ1Wl1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  保存配置成功后，如果填写信息无误，点击侧边导航中的 PDNS 就可以看到 PDNS 的各项配置信息。如果填写有误，则没有任何信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/UdkXGi.webp&quot; alt=&quot;UdkXGi&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;新增域名&quot;&gt;新增域名&lt;/h4&gt;

&lt;p&gt;  接下来就可以点击侧边导航栏中的 New Domain 来新增私有域名 home.lisz。如下图所示，我们需要填写的是域名，需要选择的是域名模板，一般 basic_template_1 即可。之后点击 Submit 按钮提交。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/nMyRKR.webp&quot; alt=&quot;nMyRKR&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;新增解析记录&quot;&gt;新增解析记录&lt;/h4&gt;

&lt;p&gt;  新增域名成功后，我们就可以在 Dashboard 里面的域名列表看到 home.lisz 了。点击即可进入域名解析。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/naFe9s.webp&quot; alt=&quot;naFe9s&quot; /&gt;&lt;/p&gt;

&lt;p&gt;  这里我们以一个 CNAME 和 A 记录为例，来尝试新增解析记录。如下图所示，点击左上角的 Add Record 添加记录，完成后点击右上角的 Apply Changes 来提交解析记录到 PDNS。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://i.lisz.top/blog/SmwtCT.webp&quot; alt=&quot;SmwtCT&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;premonition note&quot;&gt; &lt;div class=&quot;header&quot;&gt; &lt;svg class=&quot;icon note&quot; aria-hidden=&quot;true&quot;&gt; &lt;use xlink:href=&quot;#icon-note&quot;&gt;&lt;/use&gt; &lt;/svg&gt; &lt;div class=&quot;title&quot;&gt; 小知识 &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;content&quot;&gt; &lt;p&gt;  实际域名解析时我们一般会采用 CNAME 和 A 记录联合使用的方式，这样相当于在 DNS 解析层面就有负载均衡了。A 记录是域名与 IP 的关系，这就意味着同一个域名可以有多个 A 记录。CNAME 记录是域名与域名的关系，而两个域名分别是为了不同的目的，前一个是为了给大家使用的，后一个是为了运维人员使用的。当存在 CNAME → A 时，客户端会根据网络情况来判断使用哪一条 A 记录对应的 IP，从而提升用户体验。&lt;/p&gt;



 &lt;/div&gt; &lt;/div&gt;
&lt;h3 id=&quot;验证&quot;&gt;验证&lt;/h3&gt;

&lt;h4 id=&quot;验证权威-dns-是否正常&quot;&gt;验证权威 DNS 是否正常&lt;/h4&gt;

&lt;p&gt;  如下所示向 AdGuard Home 询问私有域名解析记录，解析正常。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;─&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dig @127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 53 www.home.lisz

&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; DiG 9.18.1-1ubuntu1.1-Ubuntu &amp;lt;&amp;lt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; @127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 53 www.home.lisz
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 server found&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; global options: +cmd
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; Got answer:
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;opcode&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;: QUERY, status: NOERROR, id: 47193
;; flags: qr aa rd; QUERY: 1, ANSWER: 2, AUTHORITY: 0, ADDITIONAL: 1
;; WARNING: recursion requested but not available

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 1232
;; QUESTION SECTION:
;www.home.lisz.                 IN      A

;; ANSWER SECTION:
www.home.lisz.          60      IN      CNAME   www101.home.lisz.
www101.home.lisz.       60      IN      A       192.168.1.1

;; Query time: 20 msec
;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)
;; WHEN: Tue Aug 23 17:05:15 JST 2022
;; MSG SIZE  rcvd: 79
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;验证递归-dns-是否正常&quot;&gt;验证递归 DNS 是否正常&lt;/h4&gt;

&lt;p&gt;  如下所示，向 AdGuard Home 询问公有域名解析记录，解析正常。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;dig @127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 53 www.baidu.com

&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &amp;lt;&amp;lt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; DiG 9.18.1-1ubuntu1.1-Ubuntu &amp;lt;&amp;lt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; @127.0.0.1 &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 53 www.baidu.com
&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1 server found&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; global options: +cmd
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; Got answer:
&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt; -&amp;gt;&amp;gt;HEADER&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;-&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;opcode&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;: QUERY, status: NOERROR, id: 8988
;; flags: qr rd ra; QUERY: 1, ANSWER: 4, AUTHORITY: 0, ADDITIONAL: 1

;; OPT PSEUDOSECTION:
; EDNS: version: 0, flags:; udp: 1232
;; QUESTION SECTION:
;www.baidu.com.                 IN      A

;; ANSWER SECTION:
www.baidu.com.          831     IN      CNAME   www.a.shifen.com.
www.a.shifen.com.       28      IN      CNAME   www.wshifen.com.
www.wshifen.com.        192     IN      A       45.113.192.102
www.wshifen.com.        192     IN      A       45.113.192.101

;; Query time: 244 msec
;; SERVER: 127.0.0.1#53(127.0.0.1) (UDP)
;; WHEN: Tue Aug 23 17:06:03 JST 2022
;; MSG SIZE  rcvd: 127
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;参考资料&quot;&gt;参考资料&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.aliyun.com/document_detail/64623.html&quot;&gt;阿里云帮助中心 - 云解析 - 应用场景&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/document/product/1338/50547&quot;&gt;腾讯云文档中心 - 子域名递归解析说明&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.huaweicloud.com/dns_faq/dns_faq_040.html&quot;&gt;华为云文档 - 如何设置内网域名既支持内网解析，也支持公网解析？&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1123748&quot;&gt;公司内网搭建代理 DNS 使用内网域名代替 ip 地址&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1821030&quot;&gt;一文搞懂 DNS 基础知识，收藏起来有备无患~&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://cloud.tencent.com/developer/article/1691018&quot;&gt;搞它！！！深入了解DNS域名解析服务，教你搭建一个属于自己的DNS服务器（正向解析、反向解析、泛域名解析、邮件交换解析、别名解析、分离解析，主从结构解析）&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.modb.pro/db/433331&quot;&gt;推荐一款 Private DNS 服务&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sspai.com/post/63088&quot;&gt;AdGuard Home 安装及使用指北&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.gjbmj.gov.cn/n1/2021/0722/c411145-32166624.html&quot;&gt;内网域名系统的安全保密风险研究&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://computingforgeeks.com/running-powerdns-and-powerdns-admin-in-docker-containers/&quot;&gt;Running PowerDNS and PowerDNS Admin in Docker Containers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Thu, 04 Aug 2022 11:30:00 +0900</pubDate>
        <link>https://lisz.me/tech/webmaster/internal-dns.html</link>
        <guid isPermaLink="true">https://lisz.me/tech/webmaster/internal-dns.html</guid>
        
        <category>域名解析</category>
        
        <category>DNS</category>
        
        <category>私有域名</category>
        
        <category>内网</category>
        
        
        <category>tech</category>
        
        <category>webmaster</category>
        
      </item>
    
  </channel>
</rss>
